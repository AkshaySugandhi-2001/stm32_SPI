
SPI_Cmd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f04  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080020d4  080020d4  000030d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002254  08002254  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002254  08002254  00003254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800225c  0800225c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800225c  0800225c  0000325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002260  08002260  00003260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002264  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080022c0  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080022c0  000041c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f55  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007c6  00000000  00000000  00005fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  000067a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c2  00000000  00000000  00006a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003887  00000000  00000000  00006bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c10  00000000  00000000  0000a461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c012  00000000  00000000  0000d071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00019083  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000110c  00000000  00000000  000190c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000037  00000000  00000000  0001a1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080020bc 	.word	0x080020bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080020bc 	.word	0x080020bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d161      	bne.n	8000396 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a33      	ldr	r2, [pc, #204]	@ (80003a4 <GPIO_PeriClockControl+0xe4>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002da:	4b33      	ldr	r3, [pc, #204]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002de:	4a32      	ldr	r2, [pc, #200]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
		//TODO
	}

}
 80002e6:	e056      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a30      	ldr	r2, [pc, #192]	@ (80003ac <GPIO_PeriClockControl+0xec>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d106      	bne.n	80002fe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002f0:	4b2d      	ldr	r3, [pc, #180]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f4:	4a2c      	ldr	r2, [pc, #176]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002fc:	e04b      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a2b      	ldr	r2, [pc, #172]	@ (80003b0 <GPIO_PeriClockControl+0xf0>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000306:	4b28      	ldr	r3, [pc, #160]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030a:	4a27      	ldr	r2, [pc, #156]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 800030c:	f043 0304 	orr.w	r3, r3, #4
 8000310:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000312:	e040      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a27      	ldr	r2, [pc, #156]	@ (80003b4 <GPIO_PeriClockControl+0xf4>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d106      	bne.n	800032a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800031c:	4b22      	ldr	r3, [pc, #136]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000320:	4a21      	ldr	r2, [pc, #132]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000328:	e035      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a22      	ldr	r2, [pc, #136]	@ (80003b8 <GPIO_PeriClockControl+0xf8>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000332:	4b1d      	ldr	r3, [pc, #116]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000336:	4a1c      	ldr	r2, [pc, #112]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000338:	f043 0310 	orr.w	r3, r3, #16
 800033c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800033e:	e02a      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a1e      	ldr	r2, [pc, #120]	@ (80003bc <GPIO_PeriClockControl+0xfc>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000348:	4b17      	ldr	r3, [pc, #92]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034c:	4a16      	ldr	r2, [pc, #88]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000354:	e01f      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a19      	ldr	r2, [pc, #100]	@ (80003c0 <GPIO_PeriClockControl+0x100>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800035e:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000362:	4a11      	ldr	r2, [pc, #68]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000368:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036a:	e014      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a15      	ldr	r2, [pc, #84]	@ (80003c4 <GPIO_PeriClockControl+0x104>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000374:	4b0c      	ldr	r3, [pc, #48]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000378:	4a0b      	ldr	r2, [pc, #44]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 800037a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800037e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000380:	e009      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a10      	ldr	r2, [pc, #64]	@ (80003c8 <GPIO_PeriClockControl+0x108>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d105      	bne.n	8000396 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800038a:	4b07      	ldr	r3, [pc, #28]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038e:	4a06      	ldr	r2, [pc, #24]	@ (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000394:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40020000 	.word	0x40020000
 80003a8:	40023800 	.word	0x40023800
 80003ac:	40020400 	.word	0x40020400
 80003b0:	40020800 	.word	0x40020800
 80003b4:	40020c00 	.word	0x40020c00
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40021400 	.word	0x40021400
 80003c0:	40021800 	.word	0x40021800
 80003c4:	40021c00 	.word	0x40021c00
 80003c8:	40022000 	.word	0x40022000

080003cc <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2101      	movs	r1, #1
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff6e 	bl	80002c0 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	795b      	ldrb	r3, [r3, #5]
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	d820      	bhi.n	800042e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	795b      	ldrb	r3, [r3, #5]
 80003f0:	461a      	mov	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	791b      	ldrb	r3, [r3, #4]
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	2103      	movs	r1, #3
 800040c:	fa01 f303 	lsl.w	r3, r1, r3
 8000410:	43db      	mvns	r3, r3
 8000412:	4619      	mov	r1, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	400a      	ands	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	6819      	ldr	r1, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	697a      	ldr	r2, [r7, #20]
 8000428:	430a      	orrs	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	e0cb      	b.n	80005c6 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	795b      	ldrb	r3, [r3, #5]
 8000432:	2b04      	cmp	r3, #4
 8000434:	d117      	bne.n	8000466 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000436:	4b4b      	ldr	r3, [pc, #300]	@ (8000564 <GPIO_Init+0x198>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	7912      	ldrb	r2, [r2, #4]
 800043e:	4611      	mov	r1, r2
 8000440:	2201      	movs	r2, #1
 8000442:	408a      	lsls	r2, r1
 8000444:	4611      	mov	r1, r2
 8000446:	4a47      	ldr	r2, [pc, #284]	@ (8000564 <GPIO_Init+0x198>)
 8000448:	430b      	orrs	r3, r1
 800044a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044c:	4b45      	ldr	r3, [pc, #276]	@ (8000564 <GPIO_Init+0x198>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	7912      	ldrb	r2, [r2, #4]
 8000454:	4611      	mov	r1, r2
 8000456:	2201      	movs	r2, #1
 8000458:	408a      	lsls	r2, r1
 800045a:	43d2      	mvns	r2, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a41      	ldr	r2, [pc, #260]	@ (8000564 <GPIO_Init+0x198>)
 8000460:	400b      	ands	r3, r1
 8000462:	6093      	str	r3, [r2, #8]
 8000464:	e035      	b.n	80004d2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	795b      	ldrb	r3, [r3, #5]
 800046a:	2b05      	cmp	r3, #5
 800046c:	d117      	bne.n	800049e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046e:	4b3d      	ldr	r3, [pc, #244]	@ (8000564 <GPIO_Init+0x198>)
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	7912      	ldrb	r2, [r2, #4]
 8000476:	4611      	mov	r1, r2
 8000478:	2201      	movs	r2, #1
 800047a:	408a      	lsls	r2, r1
 800047c:	4611      	mov	r1, r2
 800047e:	4a39      	ldr	r2, [pc, #228]	@ (8000564 <GPIO_Init+0x198>)
 8000480:	430b      	orrs	r3, r1
 8000482:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000484:	4b37      	ldr	r3, [pc, #220]	@ (8000564 <GPIO_Init+0x198>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	7912      	ldrb	r2, [r2, #4]
 800048c:	4611      	mov	r1, r2
 800048e:	2201      	movs	r2, #1
 8000490:	408a      	lsls	r2, r1
 8000492:	43d2      	mvns	r2, r2
 8000494:	4611      	mov	r1, r2
 8000496:	4a33      	ldr	r2, [pc, #204]	@ (8000564 <GPIO_Init+0x198>)
 8000498:	400b      	ands	r3, r1
 800049a:	60d3      	str	r3, [r2, #12]
 800049c:	e019      	b.n	80004d2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	795b      	ldrb	r3, [r3, #5]
 80004a2:	2b06      	cmp	r3, #6
 80004a4:	d115      	bne.n	80004d2 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000564 <GPIO_Init+0x198>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	7912      	ldrb	r2, [r2, #4]
 80004ae:	4611      	mov	r1, r2
 80004b0:	2201      	movs	r2, #1
 80004b2:	408a      	lsls	r2, r1
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000564 <GPIO_Init+0x198>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004bc:	4b29      	ldr	r3, [pc, #164]	@ (8000564 <GPIO_Init+0x198>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	7912      	ldrb	r2, [r2, #4]
 80004c4:	4611      	mov	r1, r2
 80004c6:	2201      	movs	r2, #1
 80004c8:	408a      	lsls	r2, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a25      	ldr	r2, [pc, #148]	@ (8000564 <GPIO_Init+0x198>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	089b      	lsrs	r3, r3, #2
 80004d8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	f003 0303 	and.w	r3, r3, #3
 80004e2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1f      	ldr	r2, [pc, #124]	@ (8000568 <GPIO_Init+0x19c>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d04e      	beq.n	800058c <GPIO_Init+0x1c0>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a1e      	ldr	r2, [pc, #120]	@ (800056c <GPIO_Init+0x1a0>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d032      	beq.n	800055e <GPIO_Init+0x192>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000570 <GPIO_Init+0x1a4>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d02b      	beq.n	800055a <GPIO_Init+0x18e>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a1b      	ldr	r2, [pc, #108]	@ (8000574 <GPIO_Init+0x1a8>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d024      	beq.n	8000556 <GPIO_Init+0x18a>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a19      	ldr	r2, [pc, #100]	@ (8000578 <GPIO_Init+0x1ac>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d01d      	beq.n	8000552 <GPIO_Init+0x186>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a18      	ldr	r2, [pc, #96]	@ (800057c <GPIO_Init+0x1b0>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d016      	beq.n	800054e <GPIO_Init+0x182>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a16      	ldr	r2, [pc, #88]	@ (8000580 <GPIO_Init+0x1b4>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d00f      	beq.n	800054a <GPIO_Init+0x17e>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a15      	ldr	r2, [pc, #84]	@ (8000584 <GPIO_Init+0x1b8>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d008      	beq.n	8000546 <GPIO_Init+0x17a>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a13      	ldr	r2, [pc, #76]	@ (8000588 <GPIO_Init+0x1bc>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d101      	bne.n	8000542 <GPIO_Init+0x176>
 800053e:	2308      	movs	r3, #8
 8000540:	e025      	b.n	800058e <GPIO_Init+0x1c2>
 8000542:	2300      	movs	r3, #0
 8000544:	e023      	b.n	800058e <GPIO_Init+0x1c2>
 8000546:	2307      	movs	r3, #7
 8000548:	e021      	b.n	800058e <GPIO_Init+0x1c2>
 800054a:	2306      	movs	r3, #6
 800054c:	e01f      	b.n	800058e <GPIO_Init+0x1c2>
 800054e:	2305      	movs	r3, #5
 8000550:	e01d      	b.n	800058e <GPIO_Init+0x1c2>
 8000552:	2304      	movs	r3, #4
 8000554:	e01b      	b.n	800058e <GPIO_Init+0x1c2>
 8000556:	2303      	movs	r3, #3
 8000558:	e019      	b.n	800058e <GPIO_Init+0x1c2>
 800055a:	2302      	movs	r3, #2
 800055c:	e017      	b.n	800058e <GPIO_Init+0x1c2>
 800055e:	2301      	movs	r3, #1
 8000560:	e015      	b.n	800058e <GPIO_Init+0x1c2>
 8000562:	bf00      	nop
 8000564:	40013c00 	.word	0x40013c00
 8000568:	40020000 	.word	0x40020000
 800056c:	40020400 	.word	0x40020400
 8000570:	40020800 	.word	0x40020800
 8000574:	40020c00 	.word	0x40020c00
 8000578:	40021000 	.word	0x40021000
 800057c:	40021400 	.word	0x40021400
 8000580:	40021800 	.word	0x40021800
 8000584:	40021c00 	.word	0x40021c00
 8000588:	40022000 	.word	0x40022000
 800058c:	2300      	movs	r3, #0
 800058e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000590:	4b59      	ldr	r3, [pc, #356]	@ (80006f8 <GPIO_Init+0x32c>)
 8000592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000594:	4a58      	ldr	r2, [pc, #352]	@ (80006f8 <GPIO_Init+0x32c>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059a:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 800059c:	7c7a      	ldrb	r2, [r7, #17]
 800059e:	7cbb      	ldrb	r3, [r7, #18]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	fa02 f103 	lsl.w	r1, r2, r3
 80005a6:	4a55      	ldr	r2, [pc, #340]	@ (80006fc <GPIO_Init+0x330>)
 80005a8:	7cfb      	ldrb	r3, [r7, #19]
 80005aa:	3302      	adds	r3, #2
 80005ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005b0:	4b53      	ldr	r3, [pc, #332]	@ (8000700 <GPIO_Init+0x334>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7912      	ldrb	r2, [r2, #4]
 80005b8:	4611      	mov	r1, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	408a      	lsls	r2, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	4a4f      	ldr	r2, [pc, #316]	@ (8000700 <GPIO_Init+0x334>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	799b      	ldrb	r3, [r3, #6]
 80005ca:	461a      	mov	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689a      	ldr	r2, [r3, #8]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	2103      	movs	r1, #3
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	43db      	mvns	r3, r3
 80005ec:	4619      	mov	r1, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	400a      	ands	r2, r1
 80005f4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6899      	ldr	r1, [r3, #8]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	430a      	orrs	r2, r1
 8000604:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	79db      	ldrb	r3, [r3, #7]
 800060a:	461a      	mov	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	68da      	ldr	r2, [r3, #12]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	2103      	movs	r1, #3
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	43db      	mvns	r3, r3
 800062c:	4619      	mov	r1, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	400a      	ands	r2, r1
 8000634:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	68d9      	ldr	r1, [r3, #12]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	430a      	orrs	r2, r1
 8000644:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7a1b      	ldrb	r3, [r3, #8]
 800064a:	461a      	mov	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	4619      	mov	r1, r3
 8000662:	2301      	movs	r3, #1
 8000664:	408b      	lsls	r3, r1
 8000666:	43db      	mvns	r3, r3
 8000668:	4619      	mov	r1, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	400a      	ands	r2, r1
 8000670:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6859      	ldr	r1, [r3, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	430a      	orrs	r2, r1
 8000680:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	795b      	ldrb	r3, [r3, #5]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d131      	bne.n	80006ee <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	08db      	lsrs	r3, r3, #3
 8000690:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	7c3a      	ldrb	r2, [r7, #16]
 80006a2:	3208      	adds	r2, #8
 80006a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	220f      	movs	r2, #15
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	43db      	mvns	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	7c3a      	ldrb	r2, [r7, #16]
 80006bc:	4001      	ands	r1, r0
 80006be:	3208      	adds	r2, #8
 80006c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	7c3a      	ldrb	r2, [r7, #16]
 80006ca:	3208      	adds	r2, #8
 80006cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7a5b      	ldrb	r3, [r3, #9]
 80006d4:	461a      	mov	r2, r3
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	7c3a      	ldrb	r2, [r7, #16]
 80006e6:	4301      	orrs	r1, r0
 80006e8:	3208      	adds	r2, #8
 80006ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80006ee:	bf00      	nop
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40013800 	.word	0x40013800
 8000700:	40013c00 	.word	0x40013c00

08000704 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	691a      	ldr	r2, [r3, #16]
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	fa22 f303 	lsr.w	r3, r2, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]

   return value;
 8000722:	7bfb      	ldrb	r3, [r7, #15]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
 800073c:	4613      	mov	r3, r2
 800073e:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000740:	78bb      	ldrb	r3, [r7, #2]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d109      	bne.n	800075a <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	78fa      	ldrb	r2, [r7, #3]
 800074c:	2101      	movs	r1, #1
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	431a      	orrs	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8000758:	e009      	b.n	800076e <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	78fa      	ldrb	r2, [r7, #3]
 8000760:	2101      	movs	r1, #1
 8000762:	fa01 f202 	lsl.w	r2, r1, r2
 8000766:	43d2      	mvns	r2, r2
 8000768:	401a      	ands	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	615a      	str	r2, [r3, #20]
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d11f      	bne.n	80007ce <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a12      	ldr	r2, [pc, #72]	@ (80007dc <SPI_PeriClockControl+0x60>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d106      	bne.n	80007a4 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SPI_PeriClockControl+0x64>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079a:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <SPI_PeriClockControl+0x64>)
 800079c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007a0:	6453      	str	r3, [r2, #68]	@ 0x44
	}
	else
	{
		//TODO
	}
}
 80007a2:	e014      	b.n	80007ce <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <SPI_PeriClockControl+0x68>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d106      	bne.n	80007ba <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <SPI_PeriClockControl+0x64>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	4a0b      	ldr	r2, [pc, #44]	@ (80007e0 <SPI_PeriClockControl+0x64>)
 80007b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007b8:	e009      	b.n	80007ce <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <SPI_PeriClockControl+0x6c>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d105      	bne.n	80007ce <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 80007c2:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <SPI_PeriClockControl+0x64>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	4a06      	ldr	r2, [pc, #24]	@ (80007e0 <SPI_PeriClockControl+0x64>)
 80007c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007cc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40013000 	.word	0x40013000
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40003800 	.word	0x40003800
 80007e8:	40003c00 	.word	0x40003c00

080007ec <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2101      	movs	r1, #1
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffbe 	bl	800077c <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	791b      	ldrb	r3, [r3, #4]
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4313      	orrs	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	795b      	ldrb	r3, [r3, #5]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d104      	bne.n	8000822 <SPI_Init+0x36>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	e014      	b.n	800084c <SPI_Init+0x60>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	795b      	ldrb	r3, [r3, #5]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d104      	bne.n	8000834 <SPI_Init+0x48>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e00b      	b.n	800084c <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	795b      	ldrb	r3, [r3, #5]
 8000838:	2b03      	cmp	r3, #3
 800083a:	d107      	bne.n	800084c <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000842:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800084a:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	799b      	ldrb	r3, [r3, #6]
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	4313      	orrs	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	79db      	ldrb	r3, [r3, #7]
 800085c:	02db      	lsls	r3, r3, #11
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	4313      	orrs	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7a1b      	ldrb	r3, [r3, #8]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4313      	orrs	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7a5b      	ldrb	r3, [r3, #9]
 8000874:	461a      	mov	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4313      	orrs	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7a9b      	ldrb	r3, [r3, #10]
 8000880:	025b      	lsls	r3, r3, #9
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	4313      	orrs	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	601a      	str	r2, [r3, #0]

}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <SPI_GetFlagStatus>:
{
 //todo
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	4013      	ands	r3, r2
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e000      	b.n	80008b4 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <SPI_SendData>:
 *
 * @Note              - This is blocking call

 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80008cc:	e033      	b.n	8000936 <SPI_SendData+0x76>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 80008ce:	bf00      	nop
 80008d0:	2102      	movs	r1, #2
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f7ff ffe0 	bl	8000898 <SPI_GetFlagStatus>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0f8      	beq.n	80008d0 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00e      	beq.n	8000908 <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =   *((uint16_t*)pTxBuffer);
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	60da      	str	r2, [r3, #12]
			Len--;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
			Len--;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	3301      	adds	r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	e016      	b.n	8000936 <SPI_SendData+0x76>
		}else
		{
			//8 bit DFF
			uint8_t data = *pTxBuffer;
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	75fb      	strb	r3, [r7, #23]
			 	 	 	printf("The actual data is %c \n",data);
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <SPI_SendData+0x88>)
 8000914:	f000 fd06 	bl	8001324 <iprintf>
			            pSPIx->DR = data;
 8000918:	7dfa      	ldrb	r2, [r7, #23]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	60da      	str	r2, [r3, #12]
			            printf("8-bit value written to DR: %c (0x%X)\n", data, data);
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	7dfa      	ldrb	r2, [r7, #23]
 8000922:	4619      	mov	r1, r3
 8000924:	4809      	ldr	r0, [pc, #36]	@ (800094c <SPI_SendData+0x8c>)
 8000926:	f000 fcfd 	bl	8001324 <iprintf>
			           // printf("Contents of DR: 0x%X\n", pSPIx->DR);
			            Len--;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3b01      	subs	r3, #1
 800092e:	607b      	str	r3, [r7, #4]
			            pTxBuffer++;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	3301      	adds	r3, #1
 8000934:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1c8      	bne.n	80008ce <SPI_SendData+0xe>
		}
	}

}
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	080020d4 	.word	0x080020d4
 800094c:	080020ec 	.word	0x080020ec

08000950 <SPI_ReceiveData>:
 *
 * @Note              -

 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 800095c:	e02d      	b.n	80009ba <SPI_ReceiveData+0x6a>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 800095e:	bf00      	nop
 8000960:	2101      	movs	r1, #1
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	f7ff ff98 	bl	8000898 <SPI_GetFlagStatus>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0f8      	beq.n	8000960 <SPI_ReceiveData+0x10>

			//2. check the DFF bit in CR1
			if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00e      	beq.n	8000998 <SPI_ReceiveData+0x48>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	b29a      	uxth	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	801a      	strh	r2, [r3, #0]
				Len--;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
				Len--;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3b01      	subs	r3, #1
 800098e:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	3301      	adds	r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	e010      	b.n	80009ba <SPI_ReceiveData+0x6a>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = pSPIx->DR ;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	701a      	strb	r2, [r3, #0]
				printf("The receive data is : %d",*(pRxBuffer));
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4619      	mov	r1, r3
 80009a8:	4808      	ldr	r0, [pc, #32]	@ (80009cc <SPI_ReceiveData+0x7c>)
 80009aa:	f000 fcbb 	bl	8001324 <iprintf>
				Len--;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	3301      	adds	r3, #1
 80009b8:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1ce      	bne.n	800095e <SPI_ReceiveData+0xe>
			}
		}

}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08002114 	.word	0x08002114

080009d0 <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d106      	bne.n	80009f0 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 80009ee:	e005      	b.n	80009fc <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <SPI_SSOEConfig>:
 *
 * @Note              -

 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d106      	bne.n	8000a28 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f043 0204 	orr.w	r2, r3, #4
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000a26:	e005      	b.n	8000a34 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f023 0204 	bic.w	r2, r3, #4
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	605a      	str	r2, [r3, #4]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <delay>:
//arduino led

#define LED_PIN  9

void delay(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	e002      	b.n	8000a52 <delay+0x12>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <delay+0x28>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d9f8      	bls.n	8000a4c <delay+0xc>
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	0003d08f 	.word	0x0003d08f

08000a6c <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000a72:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <SPI2_GPIOInits+0x58>)
 8000a74:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a76:	2302      	movs	r3, #2
 8000a78:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a82:	2300      	movs	r3, #0
 8000a84:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a86:	2302      	movs	r3, #2
 8000a88:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000a8a:	230d      	movs	r3, #13
 8000a8c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fc9b 	bl	80003cc <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000a96:	230f      	movs	r3, #15
 8000a98:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fc95 	bl	80003cc <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000aa2:	230e      	movs	r3, #14
 8000aa4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fc8f 	bl	80003cc <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fc89 	bl	80003cc <GPIO_Init>


}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <SPI2_Inits+0x34>)
 8000ad0:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000ada:	2304      	movs	r3, #4
 8000adc:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000aea:	463b      	mov	r3, r7
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fe7d 	bl	80007ec <SPI_Init>
}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40003800 	.word	0x40003800

08000b00 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <GPIO_ButtonInit+0x54>)
 8000b08:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000b0a:	230d      	movs	r3, #13
 8000b0c:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b12:	2302      	movs	r3, #2
 8000b14:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b16:	2300      	movs	r3, #0
 8000b18:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fc54 	bl	80003cc <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOA;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <GPIO_ButtonInit+0x58>)
 8000b26:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000b28:	2305      	movs	r3, #5
 8000b2a:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b30:	2302      	movs	r3, #2
 8000b32:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000b34:	2301      	movs	r3, #1
 8000b36:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	4807      	ldr	r0, [pc, #28]	@ (8000b5c <GPIO_ButtonInit+0x5c>)
 8000b40:	f7ff fbbe 	bl	80002c0 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000b44:	463b      	mov	r3, r7
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fc40 	bl	80003cc <GPIO_Init>

}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020c00 	.word	0x40020c00

08000b60 <SPI_VerifyResponse>:


uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]

	if(ackbyte == (uint8_t)0xF5)
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2bf5      	cmp	r3, #245	@ 0xf5
 8000b6e:	d101      	bne.n	8000b74 <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <SPI_VerifyResponse+0x16>
	}

	return 0;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <main>:

int main(void)
{
 8000b84:	b5b0      	push	{r4, r5, r7, lr}
 8000b86:	b08e      	sub	sp, #56	@ 0x38
 8000b88:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 8000b8a:	23ff      	movs	r3, #255	@ 0xff
 8000b8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t dummy_read;

	//initialise_monitor_handles();

	printf("Application is running\n");
 8000b90:	48b9      	ldr	r0, [pc, #740]	@ (8000e78 <main+0x2f4>)
 8000b92:	f000 fc2f 	bl	80013f4 <puts>

	GPIO_ButtonInit();
 8000b96:	f7ff ffb3 	bl	8000b00 <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000b9a:	f7ff ff67 	bl	8000a6c <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000b9e:	f7ff ff93 	bl	8000ac8 <SPI2_Inits>

	printf("SPI Init. done\n");
 8000ba2:	48b6      	ldr	r0, [pc, #728]	@ (8000e7c <main+0x2f8>)
 8000ba4:	f000 fc26 	bl	80013f4 <puts>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	48b5      	ldr	r0, [pc, #724]	@ (8000e80 <main+0x2fc>)
 8000bac:	f7ff ff2c 	bl	8000a08 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) )
 8000bb0:	e007      	b.n	8000bc2 <main+0x3e>
		{
			printf("not pressed\n");
 8000bb2:	48b4      	ldr	r0, [pc, #720]	@ (8000e84 <main+0x300>)
 8000bb4:	f000 fc1e 	bl	80013f4 <puts>
			GPIO_WriteToOutputPin(GPIOA,5,0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2105      	movs	r1, #5
 8000bbc:	48b2      	ldr	r0, [pc, #712]	@ (8000e88 <main+0x304>)
 8000bbe:	f7ff fdb7 	bl	8000730 <GPIO_WriteToOutputPin>
		while(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) )
 8000bc2:	210d      	movs	r1, #13
 8000bc4:	48b1      	ldr	r0, [pc, #708]	@ (8000e8c <main+0x308>)
 8000bc6:	f7ff fd9d 	bl	8000704 <GPIO_ReadFromInputPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f0      	bne.n	8000bb2 <main+0x2e>
		}

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000bd0:	f7ff ff36 	bl	8000a40 <delay>

		printf("button pressed \n");
 8000bd4:	48ae      	ldr	r0, [pc, #696]	@ (8000e90 <main+0x30c>)
 8000bd6:	f000 fc0d 	bl	80013f4 <puts>
		GPIO_WriteToOutputPin(GPIOA,5,1);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2105      	movs	r1, #5
 8000bde:	48aa      	ldr	r0, [pc, #680]	@ (8000e88 <main+0x304>)
 8000be0:	f7ff fda6 	bl	8000730 <GPIO_WriteToOutputPin>
		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8000be4:	2101      	movs	r1, #1
 8000be6:	48a6      	ldr	r0, [pc, #664]	@ (8000e80 <main+0x2fc>)
 8000be8:	f7ff fef2 	bl	80009d0 <SPI_PeripheralControl>

	    //1. CMD_LED_CTRL  	<pin no(1)>     <value(1)>

		uint8_t commandcode = COMMAND_LED_CTRL;
 8000bec:	2350      	movs	r3, #80	@ 0x50
 8000bee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		uint8_t ackbyte;
		uint8_t args[2];

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000bf2:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	48a1      	ldr	r0, [pc, #644]	@ (8000e80 <main+0x2fc>)
 8000bfc:	f7ff fe60 	bl	80008c0 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000c00:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000c04:	2201      	movs	r2, #1
 8000c06:	4619      	mov	r1, r3
 8000c08:	489d      	ldr	r0, [pc, #628]	@ (8000e80 <main+0x2fc>)
 8000c0a:	f7ff fea1 	bl	8000950 <SPI_ReceiveData>


		//Send some dummy bits (1 byte) fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000c0e:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000c12:	2201      	movs	r2, #1
 8000c14:	4619      	mov	r1, r3
 8000c16:	489a      	ldr	r0, [pc, #616]	@ (8000e80 <main+0x2fc>)
 8000c18:	f7ff fe52 	bl	80008c0 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000c1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c20:	2201      	movs	r2, #1
 8000c22:	4619      	mov	r1, r3
 8000c24:	4896      	ldr	r0, [pc, #600]	@ (8000e80 <main+0x2fc>)
 8000c26:	f7ff fe93 	bl	8000950 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 8000c2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff96 	bl	8000b60 <SPI_VerifyResponse>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d016      	beq.n	8000c68 <main+0xe4>
		{
			args[0] = LED_PIN;
 8000c3a:	2309      	movs	r3, #9
 8000c3c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			args[1] = LED_ON;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

			//send arguments
			SPI_SendData(SPI2,args,2);
 8000c46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	488c      	ldr	r0, [pc, #560]	@ (8000e80 <main+0x2fc>)
 8000c50:	f7ff fe36 	bl	80008c0 <SPI_SendData>
			// dummy read
			SPI_ReceiveData(SPI2,args,2);
 8000c54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c58:	2202      	movs	r2, #2
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4888      	ldr	r0, [pc, #544]	@ (8000e80 <main+0x2fc>)
 8000c5e:	f7ff fe77 	bl	8000950 <SPI_ReceiveData>
			printf("COMMAND_LED_CTRL Executed\n");
 8000c62:	488c      	ldr	r0, [pc, #560]	@ (8000e94 <main+0x310>)
 8000c64:	f000 fbc6 	bl	80013f4 <puts>


		//2. CMD_SENOSR_READ   <analog pin number(1) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 8000c68:	bf00      	nop
 8000c6a:	210d      	movs	r1, #13
 8000c6c:	4887      	ldr	r0, [pc, #540]	@ (8000e8c <main+0x308>)
 8000c6e:	f7ff fd49 	bl	8000704 <GPIO_ReadFromInputPin>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f8      	beq.n	8000c6a <main+0xe6>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000c78:	f7ff fee2 	bl	8000a40 <delay>

		commandcode = COMMAND_SENSOR_READ;
 8000c7c:	2351      	movs	r3, #81	@ 0x51
 8000c7e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000c82:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000c86:	2201      	movs	r2, #1
 8000c88:	4619      	mov	r1, r3
 8000c8a:	487d      	ldr	r0, [pc, #500]	@ (8000e80 <main+0x2fc>)
 8000c8c:	f7ff fe18 	bl	80008c0 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000c90:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000c94:	2201      	movs	r2, #1
 8000c96:	4619      	mov	r1, r3
 8000c98:	4879      	ldr	r0, [pc, #484]	@ (8000e80 <main+0x2fc>)
 8000c9a:	f7ff fe59 	bl	8000950 <SPI_ReceiveData>


		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000c9e:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4876      	ldr	r0, [pc, #472]	@ (8000e80 <main+0x2fc>)
 8000ca8:	f7ff fe0a 	bl	80008c0 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000cac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4872      	ldr	r0, [pc, #456]	@ (8000e80 <main+0x2fc>)
 8000cb6:	f7ff fe4b 	bl	8000950 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 8000cba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff4e 	bl	8000b60 <SPI_VerifyResponse>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d024      	beq.n	8000d14 <main+0x190>
		{
			args[0] = ANALOG_PIN0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 8000cd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4869      	ldr	r0, [pc, #420]	@ (8000e80 <main+0x2fc>)
 8000cda:	f7ff fdf1 	bl	80008c0 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000cde:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4866      	ldr	r0, [pc, #408]	@ (8000e80 <main+0x2fc>)
 8000ce8:	f7ff fe32 	bl	8000950 <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 8000cec:	f7ff fea8 	bl	8000a40 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 8000cf0:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4861      	ldr	r0, [pc, #388]	@ (8000e80 <main+0x2fc>)
 8000cfa:	f7ff fde1 	bl	80008c0 <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2,&analog_read,1);
 8000cfe:	1cfb      	adds	r3, r7, #3
 8000d00:	2201      	movs	r2, #1
 8000d02:	4619      	mov	r1, r3
 8000d04:	485e      	ldr	r0, [pc, #376]	@ (8000e80 <main+0x2fc>)
 8000d06:	f7ff fe23 	bl	8000950 <SPI_ReceiveData>
			printf("COMMAND_SENSOR_READ %d\n",analog_read);
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4862      	ldr	r0, [pc, #392]	@ (8000e98 <main+0x314>)
 8000d10:	f000 fb08 	bl	8001324 <iprintf>
		}

		//3.  CMD_LED_READ 	 <pin no(1) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 8000d14:	bf00      	nop
 8000d16:	210d      	movs	r1, #13
 8000d18:	485c      	ldr	r0, [pc, #368]	@ (8000e8c <main+0x308>)
 8000d1a:	f7ff fcf3 	bl	8000704 <GPIO_ReadFromInputPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f8      	beq.n	8000d16 <main+0x192>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000d24:	f7ff fe8c 	bl	8000a40 <delay>

		commandcode = COMMAND_LED_READ;
 8000d28:	2352      	movs	r3, #82	@ 0x52
 8000d2a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000d2e:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000d32:	2201      	movs	r2, #1
 8000d34:	4619      	mov	r1, r3
 8000d36:	4852      	ldr	r0, [pc, #328]	@ (8000e80 <main+0x2fc>)
 8000d38:	f7ff fdc2 	bl	80008c0 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000d3c:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000d40:	2201      	movs	r2, #1
 8000d42:	4619      	mov	r1, r3
 8000d44:	484e      	ldr	r0, [pc, #312]	@ (8000e80 <main+0x2fc>)
 8000d46:	f7ff fe03 	bl	8000950 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000d4a:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4619      	mov	r1, r3
 8000d52:	484b      	ldr	r0, [pc, #300]	@ (8000e80 <main+0x2fc>)
 8000d54:	f7ff fdb4 	bl	80008c0 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4847      	ldr	r0, [pc, #284]	@ (8000e80 <main+0x2fc>)
 8000d62:	f7ff fdf5 	bl	8000950 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 8000d66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fef8 	bl	8000b60 <SPI_VerifyResponse>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d024      	beq.n	8000dc0 <main+0x23c>
		{
			args[0] = LED_PIN;
 8000d76:	2309      	movs	r3, #9
 8000d78:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 8000d7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d80:	2201      	movs	r2, #1
 8000d82:	4619      	mov	r1, r3
 8000d84:	483e      	ldr	r0, [pc, #248]	@ (8000e80 <main+0x2fc>)
 8000d86:	f7ff fd9b 	bl	80008c0 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000d8a:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4619      	mov	r1, r3
 8000d92:	483b      	ldr	r0, [pc, #236]	@ (8000e80 <main+0x2fc>)
 8000d94:	f7ff fddc 	bl	8000950 <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 8000d98:	f7ff fe52 	bl	8000a40 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 8000d9c:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000da0:	2201      	movs	r2, #1
 8000da2:	4619      	mov	r1, r3
 8000da4:	4836      	ldr	r0, [pc, #216]	@ (8000e80 <main+0x2fc>)
 8000da6:	f7ff fd8b 	bl	80008c0 <SPI_SendData>

			uint8_t led_status;
			SPI_ReceiveData(SPI2,&led_status,1);
 8000daa:	1cbb      	adds	r3, r7, #2
 8000dac:	2201      	movs	r2, #1
 8000dae:	4619      	mov	r1, r3
 8000db0:	4833      	ldr	r0, [pc, #204]	@ (8000e80 <main+0x2fc>)
 8000db2:	f7ff fdcd 	bl	8000950 <SPI_ReceiveData>
			printf("COMMAND_READ_LED %d\n",led_status);
 8000db6:	78bb      	ldrb	r3, [r7, #2]
 8000db8:	4619      	mov	r1, r3
 8000dba:	4838      	ldr	r0, [pc, #224]	@ (8000e9c <main+0x318>)
 8000dbc:	f000 fab2 	bl	8001324 <iprintf>
		}

		//4. CMD_PRINT 		<len(2)>  <message(len) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 8000dc0:	bf00      	nop
 8000dc2:	210d      	movs	r1, #13
 8000dc4:	4831      	ldr	r0, [pc, #196]	@ (8000e8c <main+0x308>)
 8000dc6:	f7ff fc9d 	bl	8000704 <GPIO_ReadFromInputPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f8      	beq.n	8000dc2 <main+0x23e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000dd0:	f7ff fe36 	bl	8000a40 <delay>

		commandcode = COMMAND_PRINT;
 8000dd4:	2353      	movs	r3, #83	@ 0x53
 8000dd6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000dda:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000dde:	2201      	movs	r2, #1
 8000de0:	4619      	mov	r1, r3
 8000de2:	4827      	ldr	r0, [pc, #156]	@ (8000e80 <main+0x2fc>)
 8000de4:	f7ff fd6c 	bl	80008c0 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000de8:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000dec:	2201      	movs	r2, #1
 8000dee:	4619      	mov	r1, r3
 8000df0:	4823      	ldr	r0, [pc, #140]	@ (8000e80 <main+0x2fc>)
 8000df2:	f7ff fdad 	bl	8000950 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000df6:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4820      	ldr	r0, [pc, #128]	@ (8000e80 <main+0x2fc>)
 8000e00:	f7ff fd5e 	bl	80008c0 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000e04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481c      	ldr	r0, [pc, #112]	@ (8000e80 <main+0x2fc>)
 8000e0e:	f7ff fd9f 	bl	8000950 <SPI_ReceiveData>

		uint8_t message[] = "Hello ! How are you ??";
 8000e12:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <main+0x31c>)
 8000e14:	f107 0410 	add.w	r4, r7, #16
 8000e18:	461d      	mov	r5, r3
 8000e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e22:	6020      	str	r0, [r4, #0]
 8000e24:	3404      	adds	r4, #4
 8000e26:	8021      	strh	r1, [r4, #0]
 8000e28:	3402      	adds	r4, #2
 8000e2a:	0c0b      	lsrs	r3, r1, #16
 8000e2c:	7023      	strb	r3, [r4, #0]
		if( SPI_VerifyResponse(ackbyte))
 8000e2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fe94 	bl	8000b60 <SPI_VerifyResponse>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d04e      	beq.n	8000edc <main+0x358>
		{
			args[0] = strlen((char*)message);
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff f9e4 	bl	8000210 <strlen>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending length
 8000e50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e54:	2201      	movs	r2, #1
 8000e56:	4619      	mov	r1, r3
 8000e58:	4809      	ldr	r0, [pc, #36]	@ (8000e80 <main+0x2fc>)
 8000e5a:	f7ff fd31 	bl	80008c0 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000e5e:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000e62:	2201      	movs	r2, #1
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <main+0x2fc>)
 8000e68:	f7ff fd72 	bl	8000950 <SPI_ReceiveData>

			delay();
 8000e6c:	f7ff fde8 	bl	8000a40 <delay>

			//send message
			for(int i = 0 ; i < args[0] ; i++){
 8000e70:	2300      	movs	r3, #0
 8000e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e74:	e029      	b.n	8000eca <main+0x346>
 8000e76:	bf00      	nop
 8000e78:	08002130 	.word	0x08002130
 8000e7c:	08002148 	.word	0x08002148
 8000e80:	40003800 	.word	0x40003800
 8000e84:	08002158 	.word	0x08002158
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	08002164 	.word	0x08002164
 8000e94:	08002174 	.word	0x08002174
 8000e98:	08002190 	.word	0x08002190
 8000e9c:	080021a8 	.word	0x080021a8
 8000ea0:	08002208 	.word	0x08002208
				SPI_SendData(SPI2,&message[i],1);
 8000ea4:	f107 0210 	add.w	r2, r7, #16
 8000ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eaa:	4413      	add	r3, r2
 8000eac:	2201      	movs	r2, #1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	483b      	ldr	r0, [pc, #236]	@ (8000fa0 <main+0x41c>)
 8000eb2:	f7ff fd05 	bl	80008c0 <SPI_SendData>
				SPI_ReceiveData(SPI2,&dummy_read,1);
 8000eb6:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4838      	ldr	r0, [pc, #224]	@ (8000fa0 <main+0x41c>)
 8000ec0:	f7ff fd46 	bl	8000950 <SPI_ReceiveData>
			for(int i = 0 ; i < args[0] ; i++){
 8000ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8000eca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ece:	461a      	mov	r2, r3
 8000ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	dbe6      	blt.n	8000ea4 <main+0x320>
			}

			printf("COMMAND_PRINT Executed \n");
 8000ed6:	4833      	ldr	r0, [pc, #204]	@ (8000fa4 <main+0x420>)
 8000ed8:	f000 fa8c 	bl	80013f4 <puts>

		}

		//5. CMD_ID_READ
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 8000edc:	bf00      	nop
 8000ede:	210d      	movs	r1, #13
 8000ee0:	4831      	ldr	r0, [pc, #196]	@ (8000fa8 <main+0x424>)
 8000ee2:	f7ff fc0f 	bl	8000704 <GPIO_ReadFromInputPin>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0f8      	beq.n	8000ede <main+0x35a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000eec:	f7ff fda8 	bl	8000a40 <delay>

		commandcode = COMMAND_ID_READ;
 8000ef0:	2354      	movs	r3, #84	@ 0x54
 8000ef2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000ef6:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000efa:	2201      	movs	r2, #1
 8000efc:	4619      	mov	r1, r3
 8000efe:	4828      	ldr	r0, [pc, #160]	@ (8000fa0 <main+0x41c>)
 8000f00:	f7ff fcde 	bl	80008c0 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000f04:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4824      	ldr	r0, [pc, #144]	@ (8000fa0 <main+0x41c>)
 8000f0e:	f7ff fd1f 	bl	8000950 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000f12:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000f16:	2201      	movs	r2, #1
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4821      	ldr	r0, [pc, #132]	@ (8000fa0 <main+0x41c>)
 8000f1c:	f7ff fcd0 	bl	80008c0 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000f20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f24:	2201      	movs	r2, #1
 8000f26:	4619      	mov	r1, r3
 8000f28:	481d      	ldr	r0, [pc, #116]	@ (8000fa0 <main+0x41c>)
 8000f2a:	f7ff fd11 	bl	8000950 <SPI_ReceiveData>

		uint8_t id[11];
		uint32_t i=0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	@ 0x30
		if( SPI_VerifyResponse(ackbyte))
 8000f32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fe12 	bl	8000b60 <SPI_VerifyResponse>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d01e      	beq.n	8000f80 <main+0x3fc>
		{
			//read 10 bytes id from the slave
			for(  i = 0 ; i < 10 ; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f46:	e011      	b.n	8000f6c <main+0x3e8>
			{
				//send dummy byte to fetch data from slave
				SPI_SendData(SPI2,&dummy_write,1);
 8000f48:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4813      	ldr	r0, [pc, #76]	@ (8000fa0 <main+0x41c>)
 8000f52:	f7ff fcb5 	bl	80008c0 <SPI_SendData>
				SPI_ReceiveData(SPI2,&id[i],1);
 8000f56:	1d3a      	adds	r2, r7, #4
 8000f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480f      	ldr	r0, [pc, #60]	@ (8000fa0 <main+0x41c>)
 8000f62:	f7ff fcf5 	bl	8000950 <SPI_ReceiveData>
			for(  i = 0 ; i < 10 ; i++)
 8000f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f68:	3301      	adds	r3, #1
 8000f6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f6e:	2b09      	cmp	r3, #9
 8000f70:	d9ea      	bls.n	8000f48 <main+0x3c4>
			}

			id[10] = '\0';
 8000f72:	2300      	movs	r3, #0
 8000f74:	73bb      	strb	r3, [r7, #14]

			printf("COMMAND_ID : %s \n",id);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	@ (8000fac <main+0x428>)
 8000f7c:	f000 f9d2 	bl	8001324 <iprintf>

		}

		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 8000f80:	bf00      	nop
 8000f82:	2180      	movs	r1, #128	@ 0x80
 8000f84:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <main+0x41c>)
 8000f86:	f7ff fc87 	bl	8000898 <SPI_GetFlagStatus>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f8      	bne.n	8000f82 <main+0x3fe>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8000f90:	2100      	movs	r1, #0
 8000f92:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <main+0x41c>)
 8000f94:	f7ff fd1c 	bl	80009d0 <SPI_PeripheralControl>

		printf("SPI Communication Closed\n");
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <main+0x42c>)
 8000f9a:	f000 fa2b 	bl	80013f4 <puts>
	{
 8000f9e:	e607      	b.n	8000bb0 <main+0x2c>
 8000fa0:	40003800 	.word	0x40003800
 8000fa4:	080021c0 	.word	0x080021c0
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	080021d8 	.word	0x080021d8
 8000fb0:	080021ec 	.word	0x080021ec

08000fb4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <ITM_SendChar+0x48>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <ITM_SendChar+0x48>)
 8000fc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fc8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <ITM_SendChar+0x4c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a0c      	ldr	r2, [pc, #48]	@ (8001000 <ITM_SendChar+0x4c>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000fd6:	bf00      	nop
 8000fd8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f8      	beq.n	8000fd8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000fe6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	6013      	str	r3, [r2, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000edfc 	.word	0xe000edfc
 8001000:	e0000e00 	.word	0xe0000e00

08001004 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e00a      	b.n	800102c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001016:	f3af 8000 	nop.w
 800101a:	4601      	mov	r1, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	60ba      	str	r2, [r7, #8]
 8001022:	b2ca      	uxtb	r2, r1
 8001024:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbf0      	blt.n	8001016 <_read+0x12>
  }

  return len;
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e009      	b.n	8001064 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ffab 	bl	8000fb4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf1      	blt.n	8001050 <_write+0x12>
  }
  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_close>:

int _close(int file)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800109e:	605a      	str	r2, [r3, #4]
  return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_isatty>:

int _isatty(int file)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	@ (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f000 fa9e 	bl	8001650 <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a05      	ldr	r2, [pc, #20]	@ (8001144 <_sbrk+0x64>)
 8001130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20020000 	.word	0x20020000
 8001140:	00000400 	.word	0x00000400
 8001144:	20000078 	.word	0x20000078
 8001148:	200001c8 	.word	0x200001c8

0800114c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800114c:	480d      	ldr	r0, [pc, #52]	@ (8001184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001150:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480c      	ldr	r0, [pc, #48]	@ (8001188 <LoopForever+0x6>)
  ldr r1, =_edata
 8001156:	490d      	ldr	r1, [pc, #52]	@ (800118c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001158:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <LoopForever+0xe>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800116c:	4c0a      	ldr	r4, [pc, #40]	@ (8001198 <LoopForever+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800117a:	f000 fa6f 	bl	800165c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117e:	f7ff fd01 	bl	8000b84 <main>

08001182 <LoopForever>:

LoopForever:
  b LoopForever
 8001182:	e7fe      	b.n	8001182 <LoopForever>
  ldr   r0, =_estack
 8001184:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001190:	08002264 	.word	0x08002264
  ldr r2, =_sbss
 8001194:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001198:	200001c8 	.word	0x200001c8

0800119c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC_IRQHandler>
	...

080011a0 <std>:
 80011a0:	2300      	movs	r3, #0
 80011a2:	b510      	push	{r4, lr}
 80011a4:	4604      	mov	r4, r0
 80011a6:	e9c0 3300 	strd	r3, r3, [r0]
 80011aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80011ae:	6083      	str	r3, [r0, #8]
 80011b0:	8181      	strh	r1, [r0, #12]
 80011b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80011b4:	81c2      	strh	r2, [r0, #14]
 80011b6:	6183      	str	r3, [r0, #24]
 80011b8:	4619      	mov	r1, r3
 80011ba:	2208      	movs	r2, #8
 80011bc:	305c      	adds	r0, #92	@ 0x5c
 80011be:	f000 f9f9 	bl	80015b4 <memset>
 80011c2:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <std+0x58>)
 80011c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80011c6:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <std+0x5c>)
 80011c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80011ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <std+0x60>)
 80011cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <std+0x64>)
 80011d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80011d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <std+0x68>)
 80011d4:	6224      	str	r4, [r4, #32]
 80011d6:	429c      	cmp	r4, r3
 80011d8:	d006      	beq.n	80011e8 <std+0x48>
 80011da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80011de:	4294      	cmp	r4, r2
 80011e0:	d002      	beq.n	80011e8 <std+0x48>
 80011e2:	33d0      	adds	r3, #208	@ 0xd0
 80011e4:	429c      	cmp	r4, r3
 80011e6:	d105      	bne.n	80011f4 <std+0x54>
 80011e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80011ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011f0:	f000 ba58 	b.w	80016a4 <__retarget_lock_init_recursive>
 80011f4:	bd10      	pop	{r4, pc}
 80011f6:	bf00      	nop
 80011f8:	08001405 	.word	0x08001405
 80011fc:	08001427 	.word	0x08001427
 8001200:	0800145f 	.word	0x0800145f
 8001204:	08001483 	.word	0x08001483
 8001208:	2000007c 	.word	0x2000007c

0800120c <stdio_exit_handler>:
 800120c:	4a02      	ldr	r2, [pc, #8]	@ (8001218 <stdio_exit_handler+0xc>)
 800120e:	4903      	ldr	r1, [pc, #12]	@ (800121c <stdio_exit_handler+0x10>)
 8001210:	4803      	ldr	r0, [pc, #12]	@ (8001220 <stdio_exit_handler+0x14>)
 8001212:	f000 b869 	b.w	80012e8 <_fwalk_sglue>
 8001216:	bf00      	nop
 8001218:	20000000 	.word	0x20000000
 800121c:	08001f45 	.word	0x08001f45
 8001220:	20000010 	.word	0x20000010

08001224 <cleanup_stdio>:
 8001224:	6841      	ldr	r1, [r0, #4]
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <cleanup_stdio+0x34>)
 8001228:	4299      	cmp	r1, r3
 800122a:	b510      	push	{r4, lr}
 800122c:	4604      	mov	r4, r0
 800122e:	d001      	beq.n	8001234 <cleanup_stdio+0x10>
 8001230:	f000 fe88 	bl	8001f44 <_fflush_r>
 8001234:	68a1      	ldr	r1, [r4, #8]
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <cleanup_stdio+0x38>)
 8001238:	4299      	cmp	r1, r3
 800123a:	d002      	beq.n	8001242 <cleanup_stdio+0x1e>
 800123c:	4620      	mov	r0, r4
 800123e:	f000 fe81 	bl	8001f44 <_fflush_r>
 8001242:	68e1      	ldr	r1, [r4, #12]
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <cleanup_stdio+0x3c>)
 8001246:	4299      	cmp	r1, r3
 8001248:	d004      	beq.n	8001254 <cleanup_stdio+0x30>
 800124a:	4620      	mov	r0, r4
 800124c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001250:	f000 be78 	b.w	8001f44 <_fflush_r>
 8001254:	bd10      	pop	{r4, pc}
 8001256:	bf00      	nop
 8001258:	2000007c 	.word	0x2000007c
 800125c:	200000e4 	.word	0x200000e4
 8001260:	2000014c 	.word	0x2000014c

08001264 <global_stdio_init.part.0>:
 8001264:	b510      	push	{r4, lr}
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <global_stdio_init.part.0+0x30>)
 8001268:	4c0b      	ldr	r4, [pc, #44]	@ (8001298 <global_stdio_init.part.0+0x34>)
 800126a:	4a0c      	ldr	r2, [pc, #48]	@ (800129c <global_stdio_init.part.0+0x38>)
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	4620      	mov	r0, r4
 8001270:	2200      	movs	r2, #0
 8001272:	2104      	movs	r1, #4
 8001274:	f7ff ff94 	bl	80011a0 <std>
 8001278:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800127c:	2201      	movs	r2, #1
 800127e:	2109      	movs	r1, #9
 8001280:	f7ff ff8e 	bl	80011a0 <std>
 8001284:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001288:	2202      	movs	r2, #2
 800128a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800128e:	2112      	movs	r1, #18
 8001290:	f7ff bf86 	b.w	80011a0 <std>
 8001294:	200001b4 	.word	0x200001b4
 8001298:	2000007c 	.word	0x2000007c
 800129c:	0800120d 	.word	0x0800120d

080012a0 <__sfp_lock_acquire>:
 80012a0:	4801      	ldr	r0, [pc, #4]	@ (80012a8 <__sfp_lock_acquire+0x8>)
 80012a2:	f000 ba00 	b.w	80016a6 <__retarget_lock_acquire_recursive>
 80012a6:	bf00      	nop
 80012a8:	200001bd 	.word	0x200001bd

080012ac <__sfp_lock_release>:
 80012ac:	4801      	ldr	r0, [pc, #4]	@ (80012b4 <__sfp_lock_release+0x8>)
 80012ae:	f000 b9fb 	b.w	80016a8 <__retarget_lock_release_recursive>
 80012b2:	bf00      	nop
 80012b4:	200001bd 	.word	0x200001bd

080012b8 <__sinit>:
 80012b8:	b510      	push	{r4, lr}
 80012ba:	4604      	mov	r4, r0
 80012bc:	f7ff fff0 	bl	80012a0 <__sfp_lock_acquire>
 80012c0:	6a23      	ldr	r3, [r4, #32]
 80012c2:	b11b      	cbz	r3, 80012cc <__sinit+0x14>
 80012c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012c8:	f7ff bff0 	b.w	80012ac <__sfp_lock_release>
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <__sinit+0x28>)
 80012ce:	6223      	str	r3, [r4, #32]
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__sinit+0x2c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f5      	bne.n	80012c4 <__sinit+0xc>
 80012d8:	f7ff ffc4 	bl	8001264 <global_stdio_init.part.0>
 80012dc:	e7f2      	b.n	80012c4 <__sinit+0xc>
 80012de:	bf00      	nop
 80012e0:	08001225 	.word	0x08001225
 80012e4:	200001b4 	.word	0x200001b4

080012e8 <_fwalk_sglue>:
 80012e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012ec:	4607      	mov	r7, r0
 80012ee:	4688      	mov	r8, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	2600      	movs	r6, #0
 80012f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80012f8:	f1b9 0901 	subs.w	r9, r9, #1
 80012fc:	d505      	bpl.n	800130a <_fwalk_sglue+0x22>
 80012fe:	6824      	ldr	r4, [r4, #0]
 8001300:	2c00      	cmp	r4, #0
 8001302:	d1f7      	bne.n	80012f4 <_fwalk_sglue+0xc>
 8001304:	4630      	mov	r0, r6
 8001306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800130a:	89ab      	ldrh	r3, [r5, #12]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d907      	bls.n	8001320 <_fwalk_sglue+0x38>
 8001310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001314:	3301      	adds	r3, #1
 8001316:	d003      	beq.n	8001320 <_fwalk_sglue+0x38>
 8001318:	4629      	mov	r1, r5
 800131a:	4638      	mov	r0, r7
 800131c:	47c0      	blx	r8
 800131e:	4306      	orrs	r6, r0
 8001320:	3568      	adds	r5, #104	@ 0x68
 8001322:	e7e9      	b.n	80012f8 <_fwalk_sglue+0x10>

08001324 <iprintf>:
 8001324:	b40f      	push	{r0, r1, r2, r3}
 8001326:	b507      	push	{r0, r1, r2, lr}
 8001328:	4906      	ldr	r1, [pc, #24]	@ (8001344 <iprintf+0x20>)
 800132a:	ab04      	add	r3, sp, #16
 800132c:	6808      	ldr	r0, [r1, #0]
 800132e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001332:	6881      	ldr	r1, [r0, #8]
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	f000 fadb 	bl	80018f0 <_vfiprintf_r>
 800133a:	b003      	add	sp, #12
 800133c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001340:	b004      	add	sp, #16
 8001342:	4770      	bx	lr
 8001344:	2000000c 	.word	0x2000000c

08001348 <_puts_r>:
 8001348:	6a03      	ldr	r3, [r0, #32]
 800134a:	b570      	push	{r4, r5, r6, lr}
 800134c:	6884      	ldr	r4, [r0, #8]
 800134e:	4605      	mov	r5, r0
 8001350:	460e      	mov	r6, r1
 8001352:	b90b      	cbnz	r3, 8001358 <_puts_r+0x10>
 8001354:	f7ff ffb0 	bl	80012b8 <__sinit>
 8001358:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800135a:	07db      	lsls	r3, r3, #31
 800135c:	d405      	bmi.n	800136a <_puts_r+0x22>
 800135e:	89a3      	ldrh	r3, [r4, #12]
 8001360:	0598      	lsls	r0, r3, #22
 8001362:	d402      	bmi.n	800136a <_puts_r+0x22>
 8001364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001366:	f000 f99e 	bl	80016a6 <__retarget_lock_acquire_recursive>
 800136a:	89a3      	ldrh	r3, [r4, #12]
 800136c:	0719      	lsls	r1, r3, #28
 800136e:	d502      	bpl.n	8001376 <_puts_r+0x2e>
 8001370:	6923      	ldr	r3, [r4, #16]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d135      	bne.n	80013e2 <_puts_r+0x9a>
 8001376:	4621      	mov	r1, r4
 8001378:	4628      	mov	r0, r5
 800137a:	f000 f8c5 	bl	8001508 <__swsetup_r>
 800137e:	b380      	cbz	r0, 80013e2 <_puts_r+0x9a>
 8001380:	f04f 35ff 	mov.w	r5, #4294967295
 8001384:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001386:	07da      	lsls	r2, r3, #31
 8001388:	d405      	bmi.n	8001396 <_puts_r+0x4e>
 800138a:	89a3      	ldrh	r3, [r4, #12]
 800138c:	059b      	lsls	r3, r3, #22
 800138e:	d402      	bmi.n	8001396 <_puts_r+0x4e>
 8001390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001392:	f000 f989 	bl	80016a8 <__retarget_lock_release_recursive>
 8001396:	4628      	mov	r0, r5
 8001398:	bd70      	pop	{r4, r5, r6, pc}
 800139a:	2b00      	cmp	r3, #0
 800139c:	da04      	bge.n	80013a8 <_puts_r+0x60>
 800139e:	69a2      	ldr	r2, [r4, #24]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dc17      	bgt.n	80013d4 <_puts_r+0x8c>
 80013a4:	290a      	cmp	r1, #10
 80013a6:	d015      	beq.n	80013d4 <_puts_r+0x8c>
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	6022      	str	r2, [r4, #0]
 80013ae:	7019      	strb	r1, [r3, #0]
 80013b0:	68a3      	ldr	r3, [r4, #8]
 80013b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80013b6:	3b01      	subs	r3, #1
 80013b8:	60a3      	str	r3, [r4, #8]
 80013ba:	2900      	cmp	r1, #0
 80013bc:	d1ed      	bne.n	800139a <_puts_r+0x52>
 80013be:	2b00      	cmp	r3, #0
 80013c0:	da11      	bge.n	80013e6 <_puts_r+0x9e>
 80013c2:	4622      	mov	r2, r4
 80013c4:	210a      	movs	r1, #10
 80013c6:	4628      	mov	r0, r5
 80013c8:	f000 f85f 	bl	800148a <__swbuf_r>
 80013cc:	3001      	adds	r0, #1
 80013ce:	d0d7      	beq.n	8001380 <_puts_r+0x38>
 80013d0:	250a      	movs	r5, #10
 80013d2:	e7d7      	b.n	8001384 <_puts_r+0x3c>
 80013d4:	4622      	mov	r2, r4
 80013d6:	4628      	mov	r0, r5
 80013d8:	f000 f857 	bl	800148a <__swbuf_r>
 80013dc:	3001      	adds	r0, #1
 80013de:	d1e7      	bne.n	80013b0 <_puts_r+0x68>
 80013e0:	e7ce      	b.n	8001380 <_puts_r+0x38>
 80013e2:	3e01      	subs	r6, #1
 80013e4:	e7e4      	b.n	80013b0 <_puts_r+0x68>
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	6022      	str	r2, [r4, #0]
 80013ec:	220a      	movs	r2, #10
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	e7ee      	b.n	80013d0 <_puts_r+0x88>
	...

080013f4 <puts>:
 80013f4:	4b02      	ldr	r3, [pc, #8]	@ (8001400 <puts+0xc>)
 80013f6:	4601      	mov	r1, r0
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	f7ff bfa5 	b.w	8001348 <_puts_r>
 80013fe:	bf00      	nop
 8001400:	2000000c 	.word	0x2000000c

08001404 <__sread>:
 8001404:	b510      	push	{r4, lr}
 8001406:	460c      	mov	r4, r1
 8001408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800140c:	f000 f8fc 	bl	8001608 <_read_r>
 8001410:	2800      	cmp	r0, #0
 8001412:	bfab      	itete	ge
 8001414:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001416:	89a3      	ldrhlt	r3, [r4, #12]
 8001418:	181b      	addge	r3, r3, r0
 800141a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800141e:	bfac      	ite	ge
 8001420:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001422:	81a3      	strhlt	r3, [r4, #12]
 8001424:	bd10      	pop	{r4, pc}

08001426 <__swrite>:
 8001426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800142a:	461f      	mov	r7, r3
 800142c:	898b      	ldrh	r3, [r1, #12]
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	4605      	mov	r5, r0
 8001432:	460c      	mov	r4, r1
 8001434:	4616      	mov	r6, r2
 8001436:	d505      	bpl.n	8001444 <__swrite+0x1e>
 8001438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800143c:	2302      	movs	r3, #2
 800143e:	2200      	movs	r2, #0
 8001440:	f000 f8d0 	bl	80015e4 <_lseek_r>
 8001444:	89a3      	ldrh	r3, [r4, #12]
 8001446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800144a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800144e:	81a3      	strh	r3, [r4, #12]
 8001450:	4632      	mov	r2, r6
 8001452:	463b      	mov	r3, r7
 8001454:	4628      	mov	r0, r5
 8001456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800145a:	f000 b8e7 	b.w	800162c <_write_r>

0800145e <__sseek>:
 800145e:	b510      	push	{r4, lr}
 8001460:	460c      	mov	r4, r1
 8001462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001466:	f000 f8bd 	bl	80015e4 <_lseek_r>
 800146a:	1c43      	adds	r3, r0, #1
 800146c:	89a3      	ldrh	r3, [r4, #12]
 800146e:	bf15      	itete	ne
 8001470:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001472:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001476:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800147a:	81a3      	strheq	r3, [r4, #12]
 800147c:	bf18      	it	ne
 800147e:	81a3      	strhne	r3, [r4, #12]
 8001480:	bd10      	pop	{r4, pc}

08001482 <__sclose>:
 8001482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001486:	f000 b89d 	b.w	80015c4 <_close_r>

0800148a <__swbuf_r>:
 800148a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800148c:	460e      	mov	r6, r1
 800148e:	4614      	mov	r4, r2
 8001490:	4605      	mov	r5, r0
 8001492:	b118      	cbz	r0, 800149c <__swbuf_r+0x12>
 8001494:	6a03      	ldr	r3, [r0, #32]
 8001496:	b90b      	cbnz	r3, 800149c <__swbuf_r+0x12>
 8001498:	f7ff ff0e 	bl	80012b8 <__sinit>
 800149c:	69a3      	ldr	r3, [r4, #24]
 800149e:	60a3      	str	r3, [r4, #8]
 80014a0:	89a3      	ldrh	r3, [r4, #12]
 80014a2:	071a      	lsls	r2, r3, #28
 80014a4:	d501      	bpl.n	80014aa <__swbuf_r+0x20>
 80014a6:	6923      	ldr	r3, [r4, #16]
 80014a8:	b943      	cbnz	r3, 80014bc <__swbuf_r+0x32>
 80014aa:	4621      	mov	r1, r4
 80014ac:	4628      	mov	r0, r5
 80014ae:	f000 f82b 	bl	8001508 <__swsetup_r>
 80014b2:	b118      	cbz	r0, 80014bc <__swbuf_r+0x32>
 80014b4:	f04f 37ff 	mov.w	r7, #4294967295
 80014b8:	4638      	mov	r0, r7
 80014ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	6922      	ldr	r2, [r4, #16]
 80014c0:	1a98      	subs	r0, r3, r2
 80014c2:	6963      	ldr	r3, [r4, #20]
 80014c4:	b2f6      	uxtb	r6, r6
 80014c6:	4283      	cmp	r3, r0
 80014c8:	4637      	mov	r7, r6
 80014ca:	dc05      	bgt.n	80014d8 <__swbuf_r+0x4e>
 80014cc:	4621      	mov	r1, r4
 80014ce:	4628      	mov	r0, r5
 80014d0:	f000 fd38 	bl	8001f44 <_fflush_r>
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d1ed      	bne.n	80014b4 <__swbuf_r+0x2a>
 80014d8:	68a3      	ldr	r3, [r4, #8]
 80014da:	3b01      	subs	r3, #1
 80014dc:	60a3      	str	r3, [r4, #8]
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	6022      	str	r2, [r4, #0]
 80014e4:	701e      	strb	r6, [r3, #0]
 80014e6:	6962      	ldr	r2, [r4, #20]
 80014e8:	1c43      	adds	r3, r0, #1
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d004      	beq.n	80014f8 <__swbuf_r+0x6e>
 80014ee:	89a3      	ldrh	r3, [r4, #12]
 80014f0:	07db      	lsls	r3, r3, #31
 80014f2:	d5e1      	bpl.n	80014b8 <__swbuf_r+0x2e>
 80014f4:	2e0a      	cmp	r6, #10
 80014f6:	d1df      	bne.n	80014b8 <__swbuf_r+0x2e>
 80014f8:	4621      	mov	r1, r4
 80014fa:	4628      	mov	r0, r5
 80014fc:	f000 fd22 	bl	8001f44 <_fflush_r>
 8001500:	2800      	cmp	r0, #0
 8001502:	d0d9      	beq.n	80014b8 <__swbuf_r+0x2e>
 8001504:	e7d6      	b.n	80014b4 <__swbuf_r+0x2a>
	...

08001508 <__swsetup_r>:
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4b29      	ldr	r3, [pc, #164]	@ (80015b0 <__swsetup_r+0xa8>)
 800150c:	4605      	mov	r5, r0
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	460c      	mov	r4, r1
 8001512:	b118      	cbz	r0, 800151c <__swsetup_r+0x14>
 8001514:	6a03      	ldr	r3, [r0, #32]
 8001516:	b90b      	cbnz	r3, 800151c <__swsetup_r+0x14>
 8001518:	f7ff fece 	bl	80012b8 <__sinit>
 800151c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001520:	0719      	lsls	r1, r3, #28
 8001522:	d422      	bmi.n	800156a <__swsetup_r+0x62>
 8001524:	06da      	lsls	r2, r3, #27
 8001526:	d407      	bmi.n	8001538 <__swsetup_r+0x30>
 8001528:	2209      	movs	r2, #9
 800152a:	602a      	str	r2, [r5, #0]
 800152c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001530:	81a3      	strh	r3, [r4, #12]
 8001532:	f04f 30ff 	mov.w	r0, #4294967295
 8001536:	e033      	b.n	80015a0 <__swsetup_r+0x98>
 8001538:	0758      	lsls	r0, r3, #29
 800153a:	d512      	bpl.n	8001562 <__swsetup_r+0x5a>
 800153c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800153e:	b141      	cbz	r1, 8001552 <__swsetup_r+0x4a>
 8001540:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001544:	4299      	cmp	r1, r3
 8001546:	d002      	beq.n	800154e <__swsetup_r+0x46>
 8001548:	4628      	mov	r0, r5
 800154a:	f000 f8af 	bl	80016ac <_free_r>
 800154e:	2300      	movs	r3, #0
 8001550:	6363      	str	r3, [r4, #52]	@ 0x34
 8001552:	89a3      	ldrh	r3, [r4, #12]
 8001554:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001558:	81a3      	strh	r3, [r4, #12]
 800155a:	2300      	movs	r3, #0
 800155c:	6063      	str	r3, [r4, #4]
 800155e:	6923      	ldr	r3, [r4, #16]
 8001560:	6023      	str	r3, [r4, #0]
 8001562:	89a3      	ldrh	r3, [r4, #12]
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	81a3      	strh	r3, [r4, #12]
 800156a:	6923      	ldr	r3, [r4, #16]
 800156c:	b94b      	cbnz	r3, 8001582 <__swsetup_r+0x7a>
 800156e:	89a3      	ldrh	r3, [r4, #12]
 8001570:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001578:	d003      	beq.n	8001582 <__swsetup_r+0x7a>
 800157a:	4621      	mov	r1, r4
 800157c:	4628      	mov	r0, r5
 800157e:	f000 fd2f 	bl	8001fe0 <__smakebuf_r>
 8001582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001586:	f013 0201 	ands.w	r2, r3, #1
 800158a:	d00a      	beq.n	80015a2 <__swsetup_r+0x9a>
 800158c:	2200      	movs	r2, #0
 800158e:	60a2      	str	r2, [r4, #8]
 8001590:	6962      	ldr	r2, [r4, #20]
 8001592:	4252      	negs	r2, r2
 8001594:	61a2      	str	r2, [r4, #24]
 8001596:	6922      	ldr	r2, [r4, #16]
 8001598:	b942      	cbnz	r2, 80015ac <__swsetup_r+0xa4>
 800159a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800159e:	d1c5      	bne.n	800152c <__swsetup_r+0x24>
 80015a0:	bd38      	pop	{r3, r4, r5, pc}
 80015a2:	0799      	lsls	r1, r3, #30
 80015a4:	bf58      	it	pl
 80015a6:	6962      	ldrpl	r2, [r4, #20]
 80015a8:	60a2      	str	r2, [r4, #8]
 80015aa:	e7f4      	b.n	8001596 <__swsetup_r+0x8e>
 80015ac:	2000      	movs	r0, #0
 80015ae:	e7f7      	b.n	80015a0 <__swsetup_r+0x98>
 80015b0:	2000000c 	.word	0x2000000c

080015b4 <memset>:
 80015b4:	4402      	add	r2, r0
 80015b6:	4603      	mov	r3, r0
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d100      	bne.n	80015be <memset+0xa>
 80015bc:	4770      	bx	lr
 80015be:	f803 1b01 	strb.w	r1, [r3], #1
 80015c2:	e7f9      	b.n	80015b8 <memset+0x4>

080015c4 <_close_r>:
 80015c4:	b538      	push	{r3, r4, r5, lr}
 80015c6:	4d06      	ldr	r5, [pc, #24]	@ (80015e0 <_close_r+0x1c>)
 80015c8:	2300      	movs	r3, #0
 80015ca:	4604      	mov	r4, r0
 80015cc:	4608      	mov	r0, r1
 80015ce:	602b      	str	r3, [r5, #0]
 80015d0:	f7ff fd51 	bl	8001076 <_close>
 80015d4:	1c43      	adds	r3, r0, #1
 80015d6:	d102      	bne.n	80015de <_close_r+0x1a>
 80015d8:	682b      	ldr	r3, [r5, #0]
 80015da:	b103      	cbz	r3, 80015de <_close_r+0x1a>
 80015dc:	6023      	str	r3, [r4, #0]
 80015de:	bd38      	pop	{r3, r4, r5, pc}
 80015e0:	200001b8 	.word	0x200001b8

080015e4 <_lseek_r>:
 80015e4:	b538      	push	{r3, r4, r5, lr}
 80015e6:	4d07      	ldr	r5, [pc, #28]	@ (8001604 <_lseek_r+0x20>)
 80015e8:	4604      	mov	r4, r0
 80015ea:	4608      	mov	r0, r1
 80015ec:	4611      	mov	r1, r2
 80015ee:	2200      	movs	r2, #0
 80015f0:	602a      	str	r2, [r5, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	f7ff fd66 	bl	80010c4 <_lseek>
 80015f8:	1c43      	adds	r3, r0, #1
 80015fa:	d102      	bne.n	8001602 <_lseek_r+0x1e>
 80015fc:	682b      	ldr	r3, [r5, #0]
 80015fe:	b103      	cbz	r3, 8001602 <_lseek_r+0x1e>
 8001600:	6023      	str	r3, [r4, #0]
 8001602:	bd38      	pop	{r3, r4, r5, pc}
 8001604:	200001b8 	.word	0x200001b8

08001608 <_read_r>:
 8001608:	b538      	push	{r3, r4, r5, lr}
 800160a:	4d07      	ldr	r5, [pc, #28]	@ (8001628 <_read_r+0x20>)
 800160c:	4604      	mov	r4, r0
 800160e:	4608      	mov	r0, r1
 8001610:	4611      	mov	r1, r2
 8001612:	2200      	movs	r2, #0
 8001614:	602a      	str	r2, [r5, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	f7ff fcf4 	bl	8001004 <_read>
 800161c:	1c43      	adds	r3, r0, #1
 800161e:	d102      	bne.n	8001626 <_read_r+0x1e>
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	b103      	cbz	r3, 8001626 <_read_r+0x1e>
 8001624:	6023      	str	r3, [r4, #0]
 8001626:	bd38      	pop	{r3, r4, r5, pc}
 8001628:	200001b8 	.word	0x200001b8

0800162c <_write_r>:
 800162c:	b538      	push	{r3, r4, r5, lr}
 800162e:	4d07      	ldr	r5, [pc, #28]	@ (800164c <_write_r+0x20>)
 8001630:	4604      	mov	r4, r0
 8001632:	4608      	mov	r0, r1
 8001634:	4611      	mov	r1, r2
 8001636:	2200      	movs	r2, #0
 8001638:	602a      	str	r2, [r5, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	f7ff fcff 	bl	800103e <_write>
 8001640:	1c43      	adds	r3, r0, #1
 8001642:	d102      	bne.n	800164a <_write_r+0x1e>
 8001644:	682b      	ldr	r3, [r5, #0]
 8001646:	b103      	cbz	r3, 800164a <_write_r+0x1e>
 8001648:	6023      	str	r3, [r4, #0]
 800164a:	bd38      	pop	{r3, r4, r5, pc}
 800164c:	200001b8 	.word	0x200001b8

08001650 <__errno>:
 8001650:	4b01      	ldr	r3, [pc, #4]	@ (8001658 <__errno+0x8>)
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	2000000c 	.word	0x2000000c

0800165c <__libc_init_array>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	4d0d      	ldr	r5, [pc, #52]	@ (8001694 <__libc_init_array+0x38>)
 8001660:	4c0d      	ldr	r4, [pc, #52]	@ (8001698 <__libc_init_array+0x3c>)
 8001662:	1b64      	subs	r4, r4, r5
 8001664:	10a4      	asrs	r4, r4, #2
 8001666:	2600      	movs	r6, #0
 8001668:	42a6      	cmp	r6, r4
 800166a:	d109      	bne.n	8001680 <__libc_init_array+0x24>
 800166c:	4d0b      	ldr	r5, [pc, #44]	@ (800169c <__libc_init_array+0x40>)
 800166e:	4c0c      	ldr	r4, [pc, #48]	@ (80016a0 <__libc_init_array+0x44>)
 8001670:	f000 fd24 	bl	80020bc <_init>
 8001674:	1b64      	subs	r4, r4, r5
 8001676:	10a4      	asrs	r4, r4, #2
 8001678:	2600      	movs	r6, #0
 800167a:	42a6      	cmp	r6, r4
 800167c:	d105      	bne.n	800168a <__libc_init_array+0x2e>
 800167e:	bd70      	pop	{r4, r5, r6, pc}
 8001680:	f855 3b04 	ldr.w	r3, [r5], #4
 8001684:	4798      	blx	r3
 8001686:	3601      	adds	r6, #1
 8001688:	e7ee      	b.n	8001668 <__libc_init_array+0xc>
 800168a:	f855 3b04 	ldr.w	r3, [r5], #4
 800168e:	4798      	blx	r3
 8001690:	3601      	adds	r6, #1
 8001692:	e7f2      	b.n	800167a <__libc_init_array+0x1e>
 8001694:	0800225c 	.word	0x0800225c
 8001698:	0800225c 	.word	0x0800225c
 800169c:	0800225c 	.word	0x0800225c
 80016a0:	08002260 	.word	0x08002260

080016a4 <__retarget_lock_init_recursive>:
 80016a4:	4770      	bx	lr

080016a6 <__retarget_lock_acquire_recursive>:
 80016a6:	4770      	bx	lr

080016a8 <__retarget_lock_release_recursive>:
 80016a8:	4770      	bx	lr
	...

080016ac <_free_r>:
 80016ac:	b538      	push	{r3, r4, r5, lr}
 80016ae:	4605      	mov	r5, r0
 80016b0:	2900      	cmp	r1, #0
 80016b2:	d041      	beq.n	8001738 <_free_r+0x8c>
 80016b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016b8:	1f0c      	subs	r4, r1, #4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bfb8      	it	lt
 80016be:	18e4      	addlt	r4, r4, r3
 80016c0:	f000 f8e0 	bl	8001884 <__malloc_lock>
 80016c4:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <_free_r+0x90>)
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	b933      	cbnz	r3, 80016d8 <_free_r+0x2c>
 80016ca:	6063      	str	r3, [r4, #4]
 80016cc:	6014      	str	r4, [r2, #0]
 80016ce:	4628      	mov	r0, r5
 80016d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016d4:	f000 b8dc 	b.w	8001890 <__malloc_unlock>
 80016d8:	42a3      	cmp	r3, r4
 80016da:	d908      	bls.n	80016ee <_free_r+0x42>
 80016dc:	6820      	ldr	r0, [r4, #0]
 80016de:	1821      	adds	r1, r4, r0
 80016e0:	428b      	cmp	r3, r1
 80016e2:	bf01      	itttt	eq
 80016e4:	6819      	ldreq	r1, [r3, #0]
 80016e6:	685b      	ldreq	r3, [r3, #4]
 80016e8:	1809      	addeq	r1, r1, r0
 80016ea:	6021      	streq	r1, [r4, #0]
 80016ec:	e7ed      	b.n	80016ca <_free_r+0x1e>
 80016ee:	461a      	mov	r2, r3
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	b10b      	cbz	r3, 80016f8 <_free_r+0x4c>
 80016f4:	42a3      	cmp	r3, r4
 80016f6:	d9fa      	bls.n	80016ee <_free_r+0x42>
 80016f8:	6811      	ldr	r1, [r2, #0]
 80016fa:	1850      	adds	r0, r2, r1
 80016fc:	42a0      	cmp	r0, r4
 80016fe:	d10b      	bne.n	8001718 <_free_r+0x6c>
 8001700:	6820      	ldr	r0, [r4, #0]
 8001702:	4401      	add	r1, r0
 8001704:	1850      	adds	r0, r2, r1
 8001706:	4283      	cmp	r3, r0
 8001708:	6011      	str	r1, [r2, #0]
 800170a:	d1e0      	bne.n	80016ce <_free_r+0x22>
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	6053      	str	r3, [r2, #4]
 8001712:	4408      	add	r0, r1
 8001714:	6010      	str	r0, [r2, #0]
 8001716:	e7da      	b.n	80016ce <_free_r+0x22>
 8001718:	d902      	bls.n	8001720 <_free_r+0x74>
 800171a:	230c      	movs	r3, #12
 800171c:	602b      	str	r3, [r5, #0]
 800171e:	e7d6      	b.n	80016ce <_free_r+0x22>
 8001720:	6820      	ldr	r0, [r4, #0]
 8001722:	1821      	adds	r1, r4, r0
 8001724:	428b      	cmp	r3, r1
 8001726:	bf04      	itt	eq
 8001728:	6819      	ldreq	r1, [r3, #0]
 800172a:	685b      	ldreq	r3, [r3, #4]
 800172c:	6063      	str	r3, [r4, #4]
 800172e:	bf04      	itt	eq
 8001730:	1809      	addeq	r1, r1, r0
 8001732:	6021      	streq	r1, [r4, #0]
 8001734:	6054      	str	r4, [r2, #4]
 8001736:	e7ca      	b.n	80016ce <_free_r+0x22>
 8001738:	bd38      	pop	{r3, r4, r5, pc}
 800173a:	bf00      	nop
 800173c:	200001c4 	.word	0x200001c4

08001740 <sbrk_aligned>:
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	4e0f      	ldr	r6, [pc, #60]	@ (8001780 <sbrk_aligned+0x40>)
 8001744:	460c      	mov	r4, r1
 8001746:	6831      	ldr	r1, [r6, #0]
 8001748:	4605      	mov	r5, r0
 800174a:	b911      	cbnz	r1, 8001752 <sbrk_aligned+0x12>
 800174c:	f000 fca6 	bl	800209c <_sbrk_r>
 8001750:	6030      	str	r0, [r6, #0]
 8001752:	4621      	mov	r1, r4
 8001754:	4628      	mov	r0, r5
 8001756:	f000 fca1 	bl	800209c <_sbrk_r>
 800175a:	1c43      	adds	r3, r0, #1
 800175c:	d103      	bne.n	8001766 <sbrk_aligned+0x26>
 800175e:	f04f 34ff 	mov.w	r4, #4294967295
 8001762:	4620      	mov	r0, r4
 8001764:	bd70      	pop	{r4, r5, r6, pc}
 8001766:	1cc4      	adds	r4, r0, #3
 8001768:	f024 0403 	bic.w	r4, r4, #3
 800176c:	42a0      	cmp	r0, r4
 800176e:	d0f8      	beq.n	8001762 <sbrk_aligned+0x22>
 8001770:	1a21      	subs	r1, r4, r0
 8001772:	4628      	mov	r0, r5
 8001774:	f000 fc92 	bl	800209c <_sbrk_r>
 8001778:	3001      	adds	r0, #1
 800177a:	d1f2      	bne.n	8001762 <sbrk_aligned+0x22>
 800177c:	e7ef      	b.n	800175e <sbrk_aligned+0x1e>
 800177e:	bf00      	nop
 8001780:	200001c0 	.word	0x200001c0

08001784 <_malloc_r>:
 8001784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001788:	1ccd      	adds	r5, r1, #3
 800178a:	f025 0503 	bic.w	r5, r5, #3
 800178e:	3508      	adds	r5, #8
 8001790:	2d0c      	cmp	r5, #12
 8001792:	bf38      	it	cc
 8001794:	250c      	movcc	r5, #12
 8001796:	2d00      	cmp	r5, #0
 8001798:	4606      	mov	r6, r0
 800179a:	db01      	blt.n	80017a0 <_malloc_r+0x1c>
 800179c:	42a9      	cmp	r1, r5
 800179e:	d904      	bls.n	80017aa <_malloc_r+0x26>
 80017a0:	230c      	movs	r3, #12
 80017a2:	6033      	str	r3, [r6, #0]
 80017a4:	2000      	movs	r0, #0
 80017a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001880 <_malloc_r+0xfc>
 80017ae:	f000 f869 	bl	8001884 <__malloc_lock>
 80017b2:	f8d8 3000 	ldr.w	r3, [r8]
 80017b6:	461c      	mov	r4, r3
 80017b8:	bb44      	cbnz	r4, 800180c <_malloc_r+0x88>
 80017ba:	4629      	mov	r1, r5
 80017bc:	4630      	mov	r0, r6
 80017be:	f7ff ffbf 	bl	8001740 <sbrk_aligned>
 80017c2:	1c43      	adds	r3, r0, #1
 80017c4:	4604      	mov	r4, r0
 80017c6:	d158      	bne.n	800187a <_malloc_r+0xf6>
 80017c8:	f8d8 4000 	ldr.w	r4, [r8]
 80017cc:	4627      	mov	r7, r4
 80017ce:	2f00      	cmp	r7, #0
 80017d0:	d143      	bne.n	800185a <_malloc_r+0xd6>
 80017d2:	2c00      	cmp	r4, #0
 80017d4:	d04b      	beq.n	800186e <_malloc_r+0xea>
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	4639      	mov	r1, r7
 80017da:	4630      	mov	r0, r6
 80017dc:	eb04 0903 	add.w	r9, r4, r3
 80017e0:	f000 fc5c 	bl	800209c <_sbrk_r>
 80017e4:	4581      	cmp	r9, r0
 80017e6:	d142      	bne.n	800186e <_malloc_r+0xea>
 80017e8:	6821      	ldr	r1, [r4, #0]
 80017ea:	1a6d      	subs	r5, r5, r1
 80017ec:	4629      	mov	r1, r5
 80017ee:	4630      	mov	r0, r6
 80017f0:	f7ff ffa6 	bl	8001740 <sbrk_aligned>
 80017f4:	3001      	adds	r0, #1
 80017f6:	d03a      	beq.n	800186e <_malloc_r+0xea>
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	442b      	add	r3, r5
 80017fc:	6023      	str	r3, [r4, #0]
 80017fe:	f8d8 3000 	ldr.w	r3, [r8]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	bb62      	cbnz	r2, 8001860 <_malloc_r+0xdc>
 8001806:	f8c8 7000 	str.w	r7, [r8]
 800180a:	e00f      	b.n	800182c <_malloc_r+0xa8>
 800180c:	6822      	ldr	r2, [r4, #0]
 800180e:	1b52      	subs	r2, r2, r5
 8001810:	d420      	bmi.n	8001854 <_malloc_r+0xd0>
 8001812:	2a0b      	cmp	r2, #11
 8001814:	d917      	bls.n	8001846 <_malloc_r+0xc2>
 8001816:	1961      	adds	r1, r4, r5
 8001818:	42a3      	cmp	r3, r4
 800181a:	6025      	str	r5, [r4, #0]
 800181c:	bf18      	it	ne
 800181e:	6059      	strne	r1, [r3, #4]
 8001820:	6863      	ldr	r3, [r4, #4]
 8001822:	bf08      	it	eq
 8001824:	f8c8 1000 	streq.w	r1, [r8]
 8001828:	5162      	str	r2, [r4, r5]
 800182a:	604b      	str	r3, [r1, #4]
 800182c:	4630      	mov	r0, r6
 800182e:	f000 f82f 	bl	8001890 <__malloc_unlock>
 8001832:	f104 000b 	add.w	r0, r4, #11
 8001836:	1d23      	adds	r3, r4, #4
 8001838:	f020 0007 	bic.w	r0, r0, #7
 800183c:	1ac2      	subs	r2, r0, r3
 800183e:	bf1c      	itt	ne
 8001840:	1a1b      	subne	r3, r3, r0
 8001842:	50a3      	strne	r3, [r4, r2]
 8001844:	e7af      	b.n	80017a6 <_malloc_r+0x22>
 8001846:	6862      	ldr	r2, [r4, #4]
 8001848:	42a3      	cmp	r3, r4
 800184a:	bf0c      	ite	eq
 800184c:	f8c8 2000 	streq.w	r2, [r8]
 8001850:	605a      	strne	r2, [r3, #4]
 8001852:	e7eb      	b.n	800182c <_malloc_r+0xa8>
 8001854:	4623      	mov	r3, r4
 8001856:	6864      	ldr	r4, [r4, #4]
 8001858:	e7ae      	b.n	80017b8 <_malloc_r+0x34>
 800185a:	463c      	mov	r4, r7
 800185c:	687f      	ldr	r7, [r7, #4]
 800185e:	e7b6      	b.n	80017ce <_malloc_r+0x4a>
 8001860:	461a      	mov	r2, r3
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	42a3      	cmp	r3, r4
 8001866:	d1fb      	bne.n	8001860 <_malloc_r+0xdc>
 8001868:	2300      	movs	r3, #0
 800186a:	6053      	str	r3, [r2, #4]
 800186c:	e7de      	b.n	800182c <_malloc_r+0xa8>
 800186e:	230c      	movs	r3, #12
 8001870:	6033      	str	r3, [r6, #0]
 8001872:	4630      	mov	r0, r6
 8001874:	f000 f80c 	bl	8001890 <__malloc_unlock>
 8001878:	e794      	b.n	80017a4 <_malloc_r+0x20>
 800187a:	6005      	str	r5, [r0, #0]
 800187c:	e7d6      	b.n	800182c <_malloc_r+0xa8>
 800187e:	bf00      	nop
 8001880:	200001c4 	.word	0x200001c4

08001884 <__malloc_lock>:
 8001884:	4801      	ldr	r0, [pc, #4]	@ (800188c <__malloc_lock+0x8>)
 8001886:	f7ff bf0e 	b.w	80016a6 <__retarget_lock_acquire_recursive>
 800188a:	bf00      	nop
 800188c:	200001bc 	.word	0x200001bc

08001890 <__malloc_unlock>:
 8001890:	4801      	ldr	r0, [pc, #4]	@ (8001898 <__malloc_unlock+0x8>)
 8001892:	f7ff bf09 	b.w	80016a8 <__retarget_lock_release_recursive>
 8001896:	bf00      	nop
 8001898:	200001bc 	.word	0x200001bc

0800189c <__sfputc_r>:
 800189c:	6893      	ldr	r3, [r2, #8]
 800189e:	3b01      	subs	r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	b410      	push	{r4}
 80018a4:	6093      	str	r3, [r2, #8]
 80018a6:	da08      	bge.n	80018ba <__sfputc_r+0x1e>
 80018a8:	6994      	ldr	r4, [r2, #24]
 80018aa:	42a3      	cmp	r3, r4
 80018ac:	db01      	blt.n	80018b2 <__sfputc_r+0x16>
 80018ae:	290a      	cmp	r1, #10
 80018b0:	d103      	bne.n	80018ba <__sfputc_r+0x1e>
 80018b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018b6:	f7ff bde8 	b.w	800148a <__swbuf_r>
 80018ba:	6813      	ldr	r3, [r2, #0]
 80018bc:	1c58      	adds	r0, r3, #1
 80018be:	6010      	str	r0, [r2, #0]
 80018c0:	7019      	strb	r1, [r3, #0]
 80018c2:	4608      	mov	r0, r1
 80018c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <__sfputs_r>:
 80018ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018cc:	4606      	mov	r6, r0
 80018ce:	460f      	mov	r7, r1
 80018d0:	4614      	mov	r4, r2
 80018d2:	18d5      	adds	r5, r2, r3
 80018d4:	42ac      	cmp	r4, r5
 80018d6:	d101      	bne.n	80018dc <__sfputs_r+0x12>
 80018d8:	2000      	movs	r0, #0
 80018da:	e007      	b.n	80018ec <__sfputs_r+0x22>
 80018dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018e0:	463a      	mov	r2, r7
 80018e2:	4630      	mov	r0, r6
 80018e4:	f7ff ffda 	bl	800189c <__sfputc_r>
 80018e8:	1c43      	adds	r3, r0, #1
 80018ea:	d1f3      	bne.n	80018d4 <__sfputs_r+0xa>
 80018ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018f0 <_vfiprintf_r>:
 80018f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018f4:	460d      	mov	r5, r1
 80018f6:	b09d      	sub	sp, #116	@ 0x74
 80018f8:	4614      	mov	r4, r2
 80018fa:	4698      	mov	r8, r3
 80018fc:	4606      	mov	r6, r0
 80018fe:	b118      	cbz	r0, 8001908 <_vfiprintf_r+0x18>
 8001900:	6a03      	ldr	r3, [r0, #32]
 8001902:	b90b      	cbnz	r3, 8001908 <_vfiprintf_r+0x18>
 8001904:	f7ff fcd8 	bl	80012b8 <__sinit>
 8001908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800190a:	07d9      	lsls	r1, r3, #31
 800190c:	d405      	bmi.n	800191a <_vfiprintf_r+0x2a>
 800190e:	89ab      	ldrh	r3, [r5, #12]
 8001910:	059a      	lsls	r2, r3, #22
 8001912:	d402      	bmi.n	800191a <_vfiprintf_r+0x2a>
 8001914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001916:	f7ff fec6 	bl	80016a6 <__retarget_lock_acquire_recursive>
 800191a:	89ab      	ldrh	r3, [r5, #12]
 800191c:	071b      	lsls	r3, r3, #28
 800191e:	d501      	bpl.n	8001924 <_vfiprintf_r+0x34>
 8001920:	692b      	ldr	r3, [r5, #16]
 8001922:	b99b      	cbnz	r3, 800194c <_vfiprintf_r+0x5c>
 8001924:	4629      	mov	r1, r5
 8001926:	4630      	mov	r0, r6
 8001928:	f7ff fdee 	bl	8001508 <__swsetup_r>
 800192c:	b170      	cbz	r0, 800194c <_vfiprintf_r+0x5c>
 800192e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001930:	07dc      	lsls	r4, r3, #31
 8001932:	d504      	bpl.n	800193e <_vfiprintf_r+0x4e>
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	b01d      	add	sp, #116	@ 0x74
 800193a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800193e:	89ab      	ldrh	r3, [r5, #12]
 8001940:	0598      	lsls	r0, r3, #22
 8001942:	d4f7      	bmi.n	8001934 <_vfiprintf_r+0x44>
 8001944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001946:	f7ff feaf 	bl	80016a8 <__retarget_lock_release_recursive>
 800194a:	e7f3      	b.n	8001934 <_vfiprintf_r+0x44>
 800194c:	2300      	movs	r3, #0
 800194e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001950:	2320      	movs	r3, #32
 8001952:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001956:	f8cd 800c 	str.w	r8, [sp, #12]
 800195a:	2330      	movs	r3, #48	@ 0x30
 800195c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001b0c <_vfiprintf_r+0x21c>
 8001960:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001964:	f04f 0901 	mov.w	r9, #1
 8001968:	4623      	mov	r3, r4
 800196a:	469a      	mov	sl, r3
 800196c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001970:	b10a      	cbz	r2, 8001976 <_vfiprintf_r+0x86>
 8001972:	2a25      	cmp	r2, #37	@ 0x25
 8001974:	d1f9      	bne.n	800196a <_vfiprintf_r+0x7a>
 8001976:	ebba 0b04 	subs.w	fp, sl, r4
 800197a:	d00b      	beq.n	8001994 <_vfiprintf_r+0xa4>
 800197c:	465b      	mov	r3, fp
 800197e:	4622      	mov	r2, r4
 8001980:	4629      	mov	r1, r5
 8001982:	4630      	mov	r0, r6
 8001984:	f7ff ffa1 	bl	80018ca <__sfputs_r>
 8001988:	3001      	adds	r0, #1
 800198a:	f000 80a7 	beq.w	8001adc <_vfiprintf_r+0x1ec>
 800198e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001990:	445a      	add	r2, fp
 8001992:	9209      	str	r2, [sp, #36]	@ 0x24
 8001994:	f89a 3000 	ldrb.w	r3, [sl]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 809f 	beq.w	8001adc <_vfiprintf_r+0x1ec>
 800199e:	2300      	movs	r3, #0
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019a8:	f10a 0a01 	add.w	sl, sl, #1
 80019ac:	9304      	str	r3, [sp, #16]
 80019ae:	9307      	str	r3, [sp, #28]
 80019b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80019b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80019b6:	4654      	mov	r4, sl
 80019b8:	2205      	movs	r2, #5
 80019ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019be:	4853      	ldr	r0, [pc, #332]	@ (8001b0c <_vfiprintf_r+0x21c>)
 80019c0:	f7fe fc2e 	bl	8000220 <memchr>
 80019c4:	9a04      	ldr	r2, [sp, #16]
 80019c6:	b9d8      	cbnz	r0, 8001a00 <_vfiprintf_r+0x110>
 80019c8:	06d1      	lsls	r1, r2, #27
 80019ca:	bf44      	itt	mi
 80019cc:	2320      	movmi	r3, #32
 80019ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019d2:	0713      	lsls	r3, r2, #28
 80019d4:	bf44      	itt	mi
 80019d6:	232b      	movmi	r3, #43	@ 0x2b
 80019d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019dc:	f89a 3000 	ldrb.w	r3, [sl]
 80019e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80019e2:	d015      	beq.n	8001a10 <_vfiprintf_r+0x120>
 80019e4:	9a07      	ldr	r2, [sp, #28]
 80019e6:	4654      	mov	r4, sl
 80019e8:	2000      	movs	r0, #0
 80019ea:	f04f 0c0a 	mov.w	ip, #10
 80019ee:	4621      	mov	r1, r4
 80019f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019f4:	3b30      	subs	r3, #48	@ 0x30
 80019f6:	2b09      	cmp	r3, #9
 80019f8:	d94b      	bls.n	8001a92 <_vfiprintf_r+0x1a2>
 80019fa:	b1b0      	cbz	r0, 8001a2a <_vfiprintf_r+0x13a>
 80019fc:	9207      	str	r2, [sp, #28]
 80019fe:	e014      	b.n	8001a2a <_vfiprintf_r+0x13a>
 8001a00:	eba0 0308 	sub.w	r3, r0, r8
 8001a04:	fa09 f303 	lsl.w	r3, r9, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	9304      	str	r3, [sp, #16]
 8001a0c:	46a2      	mov	sl, r4
 8001a0e:	e7d2      	b.n	80019b6 <_vfiprintf_r+0xc6>
 8001a10:	9b03      	ldr	r3, [sp, #12]
 8001a12:	1d19      	adds	r1, r3, #4
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	9103      	str	r1, [sp, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bfbb      	ittet	lt
 8001a1c:	425b      	neglt	r3, r3
 8001a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8001a22:	9307      	strge	r3, [sp, #28]
 8001a24:	9307      	strlt	r3, [sp, #28]
 8001a26:	bfb8      	it	lt
 8001a28:	9204      	strlt	r2, [sp, #16]
 8001a2a:	7823      	ldrb	r3, [r4, #0]
 8001a2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a2e:	d10a      	bne.n	8001a46 <_vfiprintf_r+0x156>
 8001a30:	7863      	ldrb	r3, [r4, #1]
 8001a32:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a34:	d132      	bne.n	8001a9c <_vfiprintf_r+0x1ac>
 8001a36:	9b03      	ldr	r3, [sp, #12]
 8001a38:	1d1a      	adds	r2, r3, #4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	9203      	str	r2, [sp, #12]
 8001a3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a42:	3402      	adds	r4, #2
 8001a44:	9305      	str	r3, [sp, #20]
 8001a46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001b1c <_vfiprintf_r+0x22c>
 8001a4a:	7821      	ldrb	r1, [r4, #0]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	4650      	mov	r0, sl
 8001a50:	f7fe fbe6 	bl	8000220 <memchr>
 8001a54:	b138      	cbz	r0, 8001a66 <_vfiprintf_r+0x176>
 8001a56:	9b04      	ldr	r3, [sp, #16]
 8001a58:	eba0 000a 	sub.w	r0, r0, sl
 8001a5c:	2240      	movs	r2, #64	@ 0x40
 8001a5e:	4082      	lsls	r2, r0
 8001a60:	4313      	orrs	r3, r2
 8001a62:	3401      	adds	r4, #1
 8001a64:	9304      	str	r3, [sp, #16]
 8001a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a6a:	4829      	ldr	r0, [pc, #164]	@ (8001b10 <_vfiprintf_r+0x220>)
 8001a6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001a70:	2206      	movs	r2, #6
 8001a72:	f7fe fbd5 	bl	8000220 <memchr>
 8001a76:	2800      	cmp	r0, #0
 8001a78:	d03f      	beq.n	8001afa <_vfiprintf_r+0x20a>
 8001a7a:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <_vfiprintf_r+0x224>)
 8001a7c:	bb1b      	cbnz	r3, 8001ac6 <_vfiprintf_r+0x1d6>
 8001a7e:	9b03      	ldr	r3, [sp, #12]
 8001a80:	3307      	adds	r3, #7
 8001a82:	f023 0307 	bic.w	r3, r3, #7
 8001a86:	3308      	adds	r3, #8
 8001a88:	9303      	str	r3, [sp, #12]
 8001a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a8c:	443b      	add	r3, r7
 8001a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a90:	e76a      	b.n	8001968 <_vfiprintf_r+0x78>
 8001a92:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a96:	460c      	mov	r4, r1
 8001a98:	2001      	movs	r0, #1
 8001a9a:	e7a8      	b.n	80019ee <_vfiprintf_r+0xfe>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	3401      	adds	r4, #1
 8001aa0:	9305      	str	r3, [sp, #20]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f04f 0c0a 	mov.w	ip, #10
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001aae:	3a30      	subs	r2, #48	@ 0x30
 8001ab0:	2a09      	cmp	r2, #9
 8001ab2:	d903      	bls.n	8001abc <_vfiprintf_r+0x1cc>
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0c6      	beq.n	8001a46 <_vfiprintf_r+0x156>
 8001ab8:	9105      	str	r1, [sp, #20]
 8001aba:	e7c4      	b.n	8001a46 <_vfiprintf_r+0x156>
 8001abc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e7f0      	b.n	8001aa8 <_vfiprintf_r+0x1b8>
 8001ac6:	ab03      	add	r3, sp, #12
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	462a      	mov	r2, r5
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <_vfiprintf_r+0x228>)
 8001ace:	a904      	add	r1, sp, #16
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	f3af 8000 	nop.w
 8001ad6:	4607      	mov	r7, r0
 8001ad8:	1c78      	adds	r0, r7, #1
 8001ada:	d1d6      	bne.n	8001a8a <_vfiprintf_r+0x19a>
 8001adc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ade:	07d9      	lsls	r1, r3, #31
 8001ae0:	d405      	bmi.n	8001aee <_vfiprintf_r+0x1fe>
 8001ae2:	89ab      	ldrh	r3, [r5, #12]
 8001ae4:	059a      	lsls	r2, r3, #22
 8001ae6:	d402      	bmi.n	8001aee <_vfiprintf_r+0x1fe>
 8001ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001aea:	f7ff fddd 	bl	80016a8 <__retarget_lock_release_recursive>
 8001aee:	89ab      	ldrh	r3, [r5, #12]
 8001af0:	065b      	lsls	r3, r3, #25
 8001af2:	f53f af1f 	bmi.w	8001934 <_vfiprintf_r+0x44>
 8001af6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001af8:	e71e      	b.n	8001938 <_vfiprintf_r+0x48>
 8001afa:	ab03      	add	r3, sp, #12
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	462a      	mov	r2, r5
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <_vfiprintf_r+0x228>)
 8001b02:	a904      	add	r1, sp, #16
 8001b04:	4630      	mov	r0, r6
 8001b06:	f000 f879 	bl	8001bfc <_printf_i>
 8001b0a:	e7e4      	b.n	8001ad6 <_vfiprintf_r+0x1e6>
 8001b0c:	0800221f 	.word	0x0800221f
 8001b10:	08002229 	.word	0x08002229
 8001b14:	00000000 	.word	0x00000000
 8001b18:	080018cb 	.word	0x080018cb
 8001b1c:	08002225 	.word	0x08002225

08001b20 <_printf_common>:
 8001b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b24:	4616      	mov	r6, r2
 8001b26:	4698      	mov	r8, r3
 8001b28:	688a      	ldr	r2, [r1, #8]
 8001b2a:	690b      	ldr	r3, [r1, #16]
 8001b2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b30:	4293      	cmp	r3, r2
 8001b32:	bfb8      	it	lt
 8001b34:	4613      	movlt	r3, r2
 8001b36:	6033      	str	r3, [r6, #0]
 8001b38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b3c:	4607      	mov	r7, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	b10a      	cbz	r2, 8001b46 <_printf_common+0x26>
 8001b42:	3301      	adds	r3, #1
 8001b44:	6033      	str	r3, [r6, #0]
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	0699      	lsls	r1, r3, #26
 8001b4a:	bf42      	ittt	mi
 8001b4c:	6833      	ldrmi	r3, [r6, #0]
 8001b4e:	3302      	addmi	r3, #2
 8001b50:	6033      	strmi	r3, [r6, #0]
 8001b52:	6825      	ldr	r5, [r4, #0]
 8001b54:	f015 0506 	ands.w	r5, r5, #6
 8001b58:	d106      	bne.n	8001b68 <_printf_common+0x48>
 8001b5a:	f104 0a19 	add.w	sl, r4, #25
 8001b5e:	68e3      	ldr	r3, [r4, #12]
 8001b60:	6832      	ldr	r2, [r6, #0]
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	42ab      	cmp	r3, r5
 8001b66:	dc26      	bgt.n	8001bb6 <_printf_common+0x96>
 8001b68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001b6c:	6822      	ldr	r2, [r4, #0]
 8001b6e:	3b00      	subs	r3, #0
 8001b70:	bf18      	it	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	0692      	lsls	r2, r2, #26
 8001b76:	d42b      	bmi.n	8001bd0 <_printf_common+0xb0>
 8001b78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	4638      	mov	r0, r7
 8001b80:	47c8      	blx	r9
 8001b82:	3001      	adds	r0, #1
 8001b84:	d01e      	beq.n	8001bc4 <_printf_common+0xa4>
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	6922      	ldr	r2, [r4, #16]
 8001b8a:	f003 0306 	and.w	r3, r3, #6
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf02      	ittt	eq
 8001b92:	68e5      	ldreq	r5, [r4, #12]
 8001b94:	6833      	ldreq	r3, [r6, #0]
 8001b96:	1aed      	subeq	r5, r5, r3
 8001b98:	68a3      	ldr	r3, [r4, #8]
 8001b9a:	bf0c      	ite	eq
 8001b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ba0:	2500      	movne	r5, #0
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	bfc4      	itt	gt
 8001ba6:	1a9b      	subgt	r3, r3, r2
 8001ba8:	18ed      	addgt	r5, r5, r3
 8001baa:	2600      	movs	r6, #0
 8001bac:	341a      	adds	r4, #26
 8001bae:	42b5      	cmp	r5, r6
 8001bb0:	d11a      	bne.n	8001be8 <_printf_common+0xc8>
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	e008      	b.n	8001bc8 <_printf_common+0xa8>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	4652      	mov	r2, sl
 8001bba:	4641      	mov	r1, r8
 8001bbc:	4638      	mov	r0, r7
 8001bbe:	47c8      	blx	r9
 8001bc0:	3001      	adds	r0, #1
 8001bc2:	d103      	bne.n	8001bcc <_printf_common+0xac>
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bcc:	3501      	adds	r5, #1
 8001bce:	e7c6      	b.n	8001b5e <_printf_common+0x3e>
 8001bd0:	18e1      	adds	r1, r4, r3
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	2030      	movs	r0, #48	@ 0x30
 8001bd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001bda:	4422      	add	r2, r4
 8001bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001be0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001be4:	3302      	adds	r3, #2
 8001be6:	e7c7      	b.n	8001b78 <_printf_common+0x58>
 8001be8:	2301      	movs	r3, #1
 8001bea:	4622      	mov	r2, r4
 8001bec:	4641      	mov	r1, r8
 8001bee:	4638      	mov	r0, r7
 8001bf0:	47c8      	blx	r9
 8001bf2:	3001      	adds	r0, #1
 8001bf4:	d0e6      	beq.n	8001bc4 <_printf_common+0xa4>
 8001bf6:	3601      	adds	r6, #1
 8001bf8:	e7d9      	b.n	8001bae <_printf_common+0x8e>
	...

08001bfc <_printf_i>:
 8001bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c00:	7e0f      	ldrb	r7, [r1, #24]
 8001c02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001c04:	2f78      	cmp	r7, #120	@ 0x78
 8001c06:	4691      	mov	r9, r2
 8001c08:	4680      	mov	r8, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	469a      	mov	sl, r3
 8001c0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c12:	d807      	bhi.n	8001c24 <_printf_i+0x28>
 8001c14:	2f62      	cmp	r7, #98	@ 0x62
 8001c16:	d80a      	bhi.n	8001c2e <_printf_i+0x32>
 8001c18:	2f00      	cmp	r7, #0
 8001c1a:	f000 80d2 	beq.w	8001dc2 <_printf_i+0x1c6>
 8001c1e:	2f58      	cmp	r7, #88	@ 0x58
 8001c20:	f000 80b9 	beq.w	8001d96 <_printf_i+0x19a>
 8001c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c2c:	e03a      	b.n	8001ca4 <_printf_i+0xa8>
 8001c2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c32:	2b15      	cmp	r3, #21
 8001c34:	d8f6      	bhi.n	8001c24 <_printf_i+0x28>
 8001c36:	a101      	add	r1, pc, #4	@ (adr r1, 8001c3c <_printf_i+0x40>)
 8001c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c3c:	08001c95 	.word	0x08001c95
 8001c40:	08001ca9 	.word	0x08001ca9
 8001c44:	08001c25 	.word	0x08001c25
 8001c48:	08001c25 	.word	0x08001c25
 8001c4c:	08001c25 	.word	0x08001c25
 8001c50:	08001c25 	.word	0x08001c25
 8001c54:	08001ca9 	.word	0x08001ca9
 8001c58:	08001c25 	.word	0x08001c25
 8001c5c:	08001c25 	.word	0x08001c25
 8001c60:	08001c25 	.word	0x08001c25
 8001c64:	08001c25 	.word	0x08001c25
 8001c68:	08001da9 	.word	0x08001da9
 8001c6c:	08001cd3 	.word	0x08001cd3
 8001c70:	08001d63 	.word	0x08001d63
 8001c74:	08001c25 	.word	0x08001c25
 8001c78:	08001c25 	.word	0x08001c25
 8001c7c:	08001dcb 	.word	0x08001dcb
 8001c80:	08001c25 	.word	0x08001c25
 8001c84:	08001cd3 	.word	0x08001cd3
 8001c88:	08001c25 	.word	0x08001c25
 8001c8c:	08001c25 	.word	0x08001c25
 8001c90:	08001d6b 	.word	0x08001d6b
 8001c94:	6833      	ldr	r3, [r6, #0]
 8001c96:	1d1a      	adds	r2, r3, #4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6032      	str	r2, [r6, #0]
 8001c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ca0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e09d      	b.n	8001de4 <_printf_i+0x1e8>
 8001ca8:	6833      	ldr	r3, [r6, #0]
 8001caa:	6820      	ldr	r0, [r4, #0]
 8001cac:	1d19      	adds	r1, r3, #4
 8001cae:	6031      	str	r1, [r6, #0]
 8001cb0:	0606      	lsls	r6, r0, #24
 8001cb2:	d501      	bpl.n	8001cb8 <_printf_i+0xbc>
 8001cb4:	681d      	ldr	r5, [r3, #0]
 8001cb6:	e003      	b.n	8001cc0 <_printf_i+0xc4>
 8001cb8:	0645      	lsls	r5, r0, #25
 8001cba:	d5fb      	bpl.n	8001cb4 <_printf_i+0xb8>
 8001cbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001cc0:	2d00      	cmp	r5, #0
 8001cc2:	da03      	bge.n	8001ccc <_printf_i+0xd0>
 8001cc4:	232d      	movs	r3, #45	@ 0x2d
 8001cc6:	426d      	negs	r5, r5
 8001cc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ccc:	4859      	ldr	r0, [pc, #356]	@ (8001e34 <_printf_i+0x238>)
 8001cce:	230a      	movs	r3, #10
 8001cd0:	e011      	b.n	8001cf6 <_printf_i+0xfa>
 8001cd2:	6821      	ldr	r1, [r4, #0]
 8001cd4:	6833      	ldr	r3, [r6, #0]
 8001cd6:	0608      	lsls	r0, r1, #24
 8001cd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8001cdc:	d402      	bmi.n	8001ce4 <_printf_i+0xe8>
 8001cde:	0649      	lsls	r1, r1, #25
 8001ce0:	bf48      	it	mi
 8001ce2:	b2ad      	uxthmi	r5, r5
 8001ce4:	2f6f      	cmp	r7, #111	@ 0x6f
 8001ce6:	4853      	ldr	r0, [pc, #332]	@ (8001e34 <_printf_i+0x238>)
 8001ce8:	6033      	str	r3, [r6, #0]
 8001cea:	bf14      	ite	ne
 8001cec:	230a      	movne	r3, #10
 8001cee:	2308      	moveq	r3, #8
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001cf6:	6866      	ldr	r6, [r4, #4]
 8001cf8:	60a6      	str	r6, [r4, #8]
 8001cfa:	2e00      	cmp	r6, #0
 8001cfc:	bfa2      	ittt	ge
 8001cfe:	6821      	ldrge	r1, [r4, #0]
 8001d00:	f021 0104 	bicge.w	r1, r1, #4
 8001d04:	6021      	strge	r1, [r4, #0]
 8001d06:	b90d      	cbnz	r5, 8001d0c <_printf_i+0x110>
 8001d08:	2e00      	cmp	r6, #0
 8001d0a:	d04b      	beq.n	8001da4 <_printf_i+0x1a8>
 8001d0c:	4616      	mov	r6, r2
 8001d0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d12:	fb03 5711 	mls	r7, r3, r1, r5
 8001d16:	5dc7      	ldrb	r7, [r0, r7]
 8001d18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d1c:	462f      	mov	r7, r5
 8001d1e:	42bb      	cmp	r3, r7
 8001d20:	460d      	mov	r5, r1
 8001d22:	d9f4      	bls.n	8001d0e <_printf_i+0x112>
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d10b      	bne.n	8001d40 <_printf_i+0x144>
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	07df      	lsls	r7, r3, #31
 8001d2c:	d508      	bpl.n	8001d40 <_printf_i+0x144>
 8001d2e:	6923      	ldr	r3, [r4, #16]
 8001d30:	6861      	ldr	r1, [r4, #4]
 8001d32:	4299      	cmp	r1, r3
 8001d34:	bfde      	ittt	le
 8001d36:	2330      	movle	r3, #48	@ 0x30
 8001d38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d40:	1b92      	subs	r2, r2, r6
 8001d42:	6122      	str	r2, [r4, #16]
 8001d44:	f8cd a000 	str.w	sl, [sp]
 8001d48:	464b      	mov	r3, r9
 8001d4a:	aa03      	add	r2, sp, #12
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	4640      	mov	r0, r8
 8001d50:	f7ff fee6 	bl	8001b20 <_printf_common>
 8001d54:	3001      	adds	r0, #1
 8001d56:	d14a      	bne.n	8001dee <_printf_i+0x1f2>
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	b004      	add	sp, #16
 8001d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	f043 0320 	orr.w	r3, r3, #32
 8001d68:	6023      	str	r3, [r4, #0]
 8001d6a:	4833      	ldr	r0, [pc, #204]	@ (8001e38 <_printf_i+0x23c>)
 8001d6c:	2778      	movs	r7, #120	@ 0x78
 8001d6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	6831      	ldr	r1, [r6, #0]
 8001d76:	061f      	lsls	r7, r3, #24
 8001d78:	f851 5b04 	ldr.w	r5, [r1], #4
 8001d7c:	d402      	bmi.n	8001d84 <_printf_i+0x188>
 8001d7e:	065f      	lsls	r7, r3, #25
 8001d80:	bf48      	it	mi
 8001d82:	b2ad      	uxthmi	r5, r5
 8001d84:	6031      	str	r1, [r6, #0]
 8001d86:	07d9      	lsls	r1, r3, #31
 8001d88:	bf44      	itt	mi
 8001d8a:	f043 0320 	orrmi.w	r3, r3, #32
 8001d8e:	6023      	strmi	r3, [r4, #0]
 8001d90:	b11d      	cbz	r5, 8001d9a <_printf_i+0x19e>
 8001d92:	2310      	movs	r3, #16
 8001d94:	e7ac      	b.n	8001cf0 <_printf_i+0xf4>
 8001d96:	4827      	ldr	r0, [pc, #156]	@ (8001e34 <_printf_i+0x238>)
 8001d98:	e7e9      	b.n	8001d6e <_printf_i+0x172>
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	f023 0320 	bic.w	r3, r3, #32
 8001da0:	6023      	str	r3, [r4, #0]
 8001da2:	e7f6      	b.n	8001d92 <_printf_i+0x196>
 8001da4:	4616      	mov	r6, r2
 8001da6:	e7bd      	b.n	8001d24 <_printf_i+0x128>
 8001da8:	6833      	ldr	r3, [r6, #0]
 8001daa:	6825      	ldr	r5, [r4, #0]
 8001dac:	6961      	ldr	r1, [r4, #20]
 8001dae:	1d18      	adds	r0, r3, #4
 8001db0:	6030      	str	r0, [r6, #0]
 8001db2:	062e      	lsls	r6, r5, #24
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	d501      	bpl.n	8001dbc <_printf_i+0x1c0>
 8001db8:	6019      	str	r1, [r3, #0]
 8001dba:	e002      	b.n	8001dc2 <_printf_i+0x1c6>
 8001dbc:	0668      	lsls	r0, r5, #25
 8001dbe:	d5fb      	bpl.n	8001db8 <_printf_i+0x1bc>
 8001dc0:	8019      	strh	r1, [r3, #0]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	6123      	str	r3, [r4, #16]
 8001dc6:	4616      	mov	r6, r2
 8001dc8:	e7bc      	b.n	8001d44 <_printf_i+0x148>
 8001dca:	6833      	ldr	r3, [r6, #0]
 8001dcc:	1d1a      	adds	r2, r3, #4
 8001dce:	6032      	str	r2, [r6, #0]
 8001dd0:	681e      	ldr	r6, [r3, #0]
 8001dd2:	6862      	ldr	r2, [r4, #4]
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f7fe fa22 	bl	8000220 <memchr>
 8001ddc:	b108      	cbz	r0, 8001de2 <_printf_i+0x1e6>
 8001dde:	1b80      	subs	r0, r0, r6
 8001de0:	6060      	str	r0, [r4, #4]
 8001de2:	6863      	ldr	r3, [r4, #4]
 8001de4:	6123      	str	r3, [r4, #16]
 8001de6:	2300      	movs	r3, #0
 8001de8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001dec:	e7aa      	b.n	8001d44 <_printf_i+0x148>
 8001dee:	6923      	ldr	r3, [r4, #16]
 8001df0:	4632      	mov	r2, r6
 8001df2:	4649      	mov	r1, r9
 8001df4:	4640      	mov	r0, r8
 8001df6:	47d0      	blx	sl
 8001df8:	3001      	adds	r0, #1
 8001dfa:	d0ad      	beq.n	8001d58 <_printf_i+0x15c>
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	079b      	lsls	r3, r3, #30
 8001e00:	d413      	bmi.n	8001e2a <_printf_i+0x22e>
 8001e02:	68e0      	ldr	r0, [r4, #12]
 8001e04:	9b03      	ldr	r3, [sp, #12]
 8001e06:	4298      	cmp	r0, r3
 8001e08:	bfb8      	it	lt
 8001e0a:	4618      	movlt	r0, r3
 8001e0c:	e7a6      	b.n	8001d5c <_printf_i+0x160>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	4632      	mov	r2, r6
 8001e12:	4649      	mov	r1, r9
 8001e14:	4640      	mov	r0, r8
 8001e16:	47d0      	blx	sl
 8001e18:	3001      	adds	r0, #1
 8001e1a:	d09d      	beq.n	8001d58 <_printf_i+0x15c>
 8001e1c:	3501      	adds	r5, #1
 8001e1e:	68e3      	ldr	r3, [r4, #12]
 8001e20:	9903      	ldr	r1, [sp, #12]
 8001e22:	1a5b      	subs	r3, r3, r1
 8001e24:	42ab      	cmp	r3, r5
 8001e26:	dcf2      	bgt.n	8001e0e <_printf_i+0x212>
 8001e28:	e7eb      	b.n	8001e02 <_printf_i+0x206>
 8001e2a:	2500      	movs	r5, #0
 8001e2c:	f104 0619 	add.w	r6, r4, #25
 8001e30:	e7f5      	b.n	8001e1e <_printf_i+0x222>
 8001e32:	bf00      	nop
 8001e34:	08002230 	.word	0x08002230
 8001e38:	08002241 	.word	0x08002241

08001e3c <__sflush_r>:
 8001e3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e44:	0716      	lsls	r6, r2, #28
 8001e46:	4605      	mov	r5, r0
 8001e48:	460c      	mov	r4, r1
 8001e4a:	d454      	bmi.n	8001ef6 <__sflush_r+0xba>
 8001e4c:	684b      	ldr	r3, [r1, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	dc02      	bgt.n	8001e58 <__sflush_r+0x1c>
 8001e52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	dd48      	ble.n	8001eea <__sflush_r+0xae>
 8001e58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e5a:	2e00      	cmp	r6, #0
 8001e5c:	d045      	beq.n	8001eea <__sflush_r+0xae>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001e64:	682f      	ldr	r7, [r5, #0]
 8001e66:	6a21      	ldr	r1, [r4, #32]
 8001e68:	602b      	str	r3, [r5, #0]
 8001e6a:	d030      	beq.n	8001ece <__sflush_r+0x92>
 8001e6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e6e:	89a3      	ldrh	r3, [r4, #12]
 8001e70:	0759      	lsls	r1, r3, #29
 8001e72:	d505      	bpl.n	8001e80 <__sflush_r+0x44>
 8001e74:	6863      	ldr	r3, [r4, #4]
 8001e76:	1ad2      	subs	r2, r2, r3
 8001e78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e7a:	b10b      	cbz	r3, 8001e80 <__sflush_r+0x44>
 8001e7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e7e:	1ad2      	subs	r2, r2, r3
 8001e80:	2300      	movs	r3, #0
 8001e82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e84:	6a21      	ldr	r1, [r4, #32]
 8001e86:	4628      	mov	r0, r5
 8001e88:	47b0      	blx	r6
 8001e8a:	1c43      	adds	r3, r0, #1
 8001e8c:	89a3      	ldrh	r3, [r4, #12]
 8001e8e:	d106      	bne.n	8001e9e <__sflush_r+0x62>
 8001e90:	6829      	ldr	r1, [r5, #0]
 8001e92:	291d      	cmp	r1, #29
 8001e94:	d82b      	bhi.n	8001eee <__sflush_r+0xb2>
 8001e96:	4a2a      	ldr	r2, [pc, #168]	@ (8001f40 <__sflush_r+0x104>)
 8001e98:	410a      	asrs	r2, r1
 8001e9a:	07d6      	lsls	r6, r2, #31
 8001e9c:	d427      	bmi.n	8001eee <__sflush_r+0xb2>
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	6062      	str	r2, [r4, #4]
 8001ea2:	04d9      	lsls	r1, r3, #19
 8001ea4:	6922      	ldr	r2, [r4, #16]
 8001ea6:	6022      	str	r2, [r4, #0]
 8001ea8:	d504      	bpl.n	8001eb4 <__sflush_r+0x78>
 8001eaa:	1c42      	adds	r2, r0, #1
 8001eac:	d101      	bne.n	8001eb2 <__sflush_r+0x76>
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	b903      	cbnz	r3, 8001eb4 <__sflush_r+0x78>
 8001eb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8001eb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001eb6:	602f      	str	r7, [r5, #0]
 8001eb8:	b1b9      	cbz	r1, 8001eea <__sflush_r+0xae>
 8001eba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ebe:	4299      	cmp	r1, r3
 8001ec0:	d002      	beq.n	8001ec8 <__sflush_r+0x8c>
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	f7ff fbf2 	bl	80016ac <_free_r>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ecc:	e00d      	b.n	8001eea <__sflush_r+0xae>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	47b0      	blx	r6
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	1c50      	adds	r0, r2, #1
 8001ed8:	d1c9      	bne.n	8001e6e <__sflush_r+0x32>
 8001eda:	682b      	ldr	r3, [r5, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0c6      	beq.n	8001e6e <__sflush_r+0x32>
 8001ee0:	2b1d      	cmp	r3, #29
 8001ee2:	d001      	beq.n	8001ee8 <__sflush_r+0xac>
 8001ee4:	2b16      	cmp	r3, #22
 8001ee6:	d11e      	bne.n	8001f26 <__sflush_r+0xea>
 8001ee8:	602f      	str	r7, [r5, #0]
 8001eea:	2000      	movs	r0, #0
 8001eec:	e022      	b.n	8001f34 <__sflush_r+0xf8>
 8001eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ef2:	b21b      	sxth	r3, r3
 8001ef4:	e01b      	b.n	8001f2e <__sflush_r+0xf2>
 8001ef6:	690f      	ldr	r7, [r1, #16]
 8001ef8:	2f00      	cmp	r7, #0
 8001efa:	d0f6      	beq.n	8001eea <__sflush_r+0xae>
 8001efc:	0793      	lsls	r3, r2, #30
 8001efe:	680e      	ldr	r6, [r1, #0]
 8001f00:	bf08      	it	eq
 8001f02:	694b      	ldreq	r3, [r1, #20]
 8001f04:	600f      	str	r7, [r1, #0]
 8001f06:	bf18      	it	ne
 8001f08:	2300      	movne	r3, #0
 8001f0a:	eba6 0807 	sub.w	r8, r6, r7
 8001f0e:	608b      	str	r3, [r1, #8]
 8001f10:	f1b8 0f00 	cmp.w	r8, #0
 8001f14:	dde9      	ble.n	8001eea <__sflush_r+0xae>
 8001f16:	6a21      	ldr	r1, [r4, #32]
 8001f18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001f1a:	4643      	mov	r3, r8
 8001f1c:	463a      	mov	r2, r7
 8001f1e:	4628      	mov	r0, r5
 8001f20:	47b0      	blx	r6
 8001f22:	2800      	cmp	r0, #0
 8001f24:	dc08      	bgt.n	8001f38 <__sflush_r+0xfc>
 8001f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f2e:	81a3      	strh	r3, [r4, #12]
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f38:	4407      	add	r7, r0
 8001f3a:	eba8 0800 	sub.w	r8, r8, r0
 8001f3e:	e7e7      	b.n	8001f10 <__sflush_r+0xd4>
 8001f40:	dfbffffe 	.word	0xdfbffffe

08001f44 <_fflush_r>:
 8001f44:	b538      	push	{r3, r4, r5, lr}
 8001f46:	690b      	ldr	r3, [r1, #16]
 8001f48:	4605      	mov	r5, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	b913      	cbnz	r3, 8001f54 <_fflush_r+0x10>
 8001f4e:	2500      	movs	r5, #0
 8001f50:	4628      	mov	r0, r5
 8001f52:	bd38      	pop	{r3, r4, r5, pc}
 8001f54:	b118      	cbz	r0, 8001f5e <_fflush_r+0x1a>
 8001f56:	6a03      	ldr	r3, [r0, #32]
 8001f58:	b90b      	cbnz	r3, 8001f5e <_fflush_r+0x1a>
 8001f5a:	f7ff f9ad 	bl	80012b8 <__sinit>
 8001f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f3      	beq.n	8001f4e <_fflush_r+0xa>
 8001f66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f68:	07d0      	lsls	r0, r2, #31
 8001f6a:	d404      	bmi.n	8001f76 <_fflush_r+0x32>
 8001f6c:	0599      	lsls	r1, r3, #22
 8001f6e:	d402      	bmi.n	8001f76 <_fflush_r+0x32>
 8001f70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f72:	f7ff fb98 	bl	80016a6 <__retarget_lock_acquire_recursive>
 8001f76:	4628      	mov	r0, r5
 8001f78:	4621      	mov	r1, r4
 8001f7a:	f7ff ff5f 	bl	8001e3c <__sflush_r>
 8001f7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f80:	07da      	lsls	r2, r3, #31
 8001f82:	4605      	mov	r5, r0
 8001f84:	d4e4      	bmi.n	8001f50 <_fflush_r+0xc>
 8001f86:	89a3      	ldrh	r3, [r4, #12]
 8001f88:	059b      	lsls	r3, r3, #22
 8001f8a:	d4e1      	bmi.n	8001f50 <_fflush_r+0xc>
 8001f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f8e:	f7ff fb8b 	bl	80016a8 <__retarget_lock_release_recursive>
 8001f92:	e7dd      	b.n	8001f50 <_fflush_r+0xc>

08001f94 <__swhatbuf_r>:
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	460c      	mov	r4, r1
 8001f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f9c:	2900      	cmp	r1, #0
 8001f9e:	b096      	sub	sp, #88	@ 0x58
 8001fa0:	4615      	mov	r5, r2
 8001fa2:	461e      	mov	r6, r3
 8001fa4:	da0d      	bge.n	8001fc2 <__swhatbuf_r+0x2e>
 8001fa6:	89a3      	ldrh	r3, [r4, #12]
 8001fa8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001fac:	f04f 0100 	mov.w	r1, #0
 8001fb0:	bf14      	ite	ne
 8001fb2:	2340      	movne	r3, #64	@ 0x40
 8001fb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001fb8:	2000      	movs	r0, #0
 8001fba:	6031      	str	r1, [r6, #0]
 8001fbc:	602b      	str	r3, [r5, #0]
 8001fbe:	b016      	add	sp, #88	@ 0x58
 8001fc0:	bd70      	pop	{r4, r5, r6, pc}
 8001fc2:	466a      	mov	r2, sp
 8001fc4:	f000 f848 	bl	8002058 <_fstat_r>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	dbec      	blt.n	8001fa6 <__swhatbuf_r+0x12>
 8001fcc:	9901      	ldr	r1, [sp, #4]
 8001fce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001fd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001fd6:	4259      	negs	r1, r3
 8001fd8:	4159      	adcs	r1, r3
 8001fda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fde:	e7eb      	b.n	8001fb8 <__swhatbuf_r+0x24>

08001fe0 <__smakebuf_r>:
 8001fe0:	898b      	ldrh	r3, [r1, #12]
 8001fe2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fe4:	079d      	lsls	r5, r3, #30
 8001fe6:	4606      	mov	r6, r0
 8001fe8:	460c      	mov	r4, r1
 8001fea:	d507      	bpl.n	8001ffc <__smakebuf_r+0x1c>
 8001fec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001ff0:	6023      	str	r3, [r4, #0]
 8001ff2:	6123      	str	r3, [r4, #16]
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	6163      	str	r3, [r4, #20]
 8001ff8:	b003      	add	sp, #12
 8001ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ffc:	ab01      	add	r3, sp, #4
 8001ffe:	466a      	mov	r2, sp
 8002000:	f7ff ffc8 	bl	8001f94 <__swhatbuf_r>
 8002004:	9f00      	ldr	r7, [sp, #0]
 8002006:	4605      	mov	r5, r0
 8002008:	4639      	mov	r1, r7
 800200a:	4630      	mov	r0, r6
 800200c:	f7ff fbba 	bl	8001784 <_malloc_r>
 8002010:	b948      	cbnz	r0, 8002026 <__smakebuf_r+0x46>
 8002012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002016:	059a      	lsls	r2, r3, #22
 8002018:	d4ee      	bmi.n	8001ff8 <__smakebuf_r+0x18>
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	81a3      	strh	r3, [r4, #12]
 8002024:	e7e2      	b.n	8001fec <__smakebuf_r+0xc>
 8002026:	89a3      	ldrh	r3, [r4, #12]
 8002028:	6020      	str	r0, [r4, #0]
 800202a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800202e:	81a3      	strh	r3, [r4, #12]
 8002030:	9b01      	ldr	r3, [sp, #4]
 8002032:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002036:	b15b      	cbz	r3, 8002050 <__smakebuf_r+0x70>
 8002038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800203c:	4630      	mov	r0, r6
 800203e:	f000 f81d 	bl	800207c <_isatty_r>
 8002042:	b128      	cbz	r0, 8002050 <__smakebuf_r+0x70>
 8002044:	89a3      	ldrh	r3, [r4, #12]
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	81a3      	strh	r3, [r4, #12]
 8002050:	89a3      	ldrh	r3, [r4, #12]
 8002052:	431d      	orrs	r5, r3
 8002054:	81a5      	strh	r5, [r4, #12]
 8002056:	e7cf      	b.n	8001ff8 <__smakebuf_r+0x18>

08002058 <_fstat_r>:
 8002058:	b538      	push	{r3, r4, r5, lr}
 800205a:	4d07      	ldr	r5, [pc, #28]	@ (8002078 <_fstat_r+0x20>)
 800205c:	2300      	movs	r3, #0
 800205e:	4604      	mov	r4, r0
 8002060:	4608      	mov	r0, r1
 8002062:	4611      	mov	r1, r2
 8002064:	602b      	str	r3, [r5, #0]
 8002066:	f7ff f812 	bl	800108e <_fstat>
 800206a:	1c43      	adds	r3, r0, #1
 800206c:	d102      	bne.n	8002074 <_fstat_r+0x1c>
 800206e:	682b      	ldr	r3, [r5, #0]
 8002070:	b103      	cbz	r3, 8002074 <_fstat_r+0x1c>
 8002072:	6023      	str	r3, [r4, #0]
 8002074:	bd38      	pop	{r3, r4, r5, pc}
 8002076:	bf00      	nop
 8002078:	200001b8 	.word	0x200001b8

0800207c <_isatty_r>:
 800207c:	b538      	push	{r3, r4, r5, lr}
 800207e:	4d06      	ldr	r5, [pc, #24]	@ (8002098 <_isatty_r+0x1c>)
 8002080:	2300      	movs	r3, #0
 8002082:	4604      	mov	r4, r0
 8002084:	4608      	mov	r0, r1
 8002086:	602b      	str	r3, [r5, #0]
 8002088:	f7ff f811 	bl	80010ae <_isatty>
 800208c:	1c43      	adds	r3, r0, #1
 800208e:	d102      	bne.n	8002096 <_isatty_r+0x1a>
 8002090:	682b      	ldr	r3, [r5, #0]
 8002092:	b103      	cbz	r3, 8002096 <_isatty_r+0x1a>
 8002094:	6023      	str	r3, [r4, #0]
 8002096:	bd38      	pop	{r3, r4, r5, pc}
 8002098:	200001b8 	.word	0x200001b8

0800209c <_sbrk_r>:
 800209c:	b538      	push	{r3, r4, r5, lr}
 800209e:	4d06      	ldr	r5, [pc, #24]	@ (80020b8 <_sbrk_r+0x1c>)
 80020a0:	2300      	movs	r3, #0
 80020a2:	4604      	mov	r4, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	602b      	str	r3, [r5, #0]
 80020a8:	f7ff f81a 	bl	80010e0 <_sbrk>
 80020ac:	1c43      	adds	r3, r0, #1
 80020ae:	d102      	bne.n	80020b6 <_sbrk_r+0x1a>
 80020b0:	682b      	ldr	r3, [r5, #0]
 80020b2:	b103      	cbz	r3, 80020b6 <_sbrk_r+0x1a>
 80020b4:	6023      	str	r3, [r4, #0]
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
 80020b8:	200001b8 	.word	0x200001b8

080020bc <_init>:
 80020bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020be:	bf00      	nop
 80020c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020c2:	bc08      	pop	{r3}
 80020c4:	469e      	mov	lr, r3
 80020c6:	4770      	bx	lr

080020c8 <_fini>:
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	bf00      	nop
 80020cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ce:	bc08      	pop	{r3}
 80020d0:	469e      	mov	lr, r3
 80020d2:	4770      	bx	lr
